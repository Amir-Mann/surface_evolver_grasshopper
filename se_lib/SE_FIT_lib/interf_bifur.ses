// interf_bifur.ses -- to process interface bifurcation when a vertex hits a three-plane juction point along the juction line between the two planes of the three.

// Programmer: Yongkang Chen, yongkang@cecs.pdx.edu

// Usage: interf_bifur (inx, id_1, id_2, id_3, id_4)
//        inx: id number of the vertex from which the bifurcation takes place
//        constraints 1, 2, and 3 follows counter-clockwise direction with the constraint 3 on the upper sie of the other two.
//        id_1: id number of the constraint to the left of the vertex trace, which is the junction like between constraint 1 and 2.
//        id_2: id number of the constraint to the right of the vertex trace
//        id_3: id number of the constraint blocking the way of the vertex
//        id_4: id number of the body that the newly generated facets should be on
//          The newly generated edges follow counter-clockwise direction
//
//                          /
//                         /
//              id_3      /
//             __________/
//                       |
//              id_1     | id_2
//                       |
//                       |

procedure interf_bifur ( integer v_inx, integer v_left_constr_id, integer v_right_constr_id, integer v_top_constr_id, integer body_id )
   { local v_nei_eid_1;
     local v_nei_eid_2;
     local v_nei_vid_1;
     local v_nei_vid_2;
     foreach vertex[v_inx].edge ee do 
        {if ee on_constraint v_left_constr_id and not on_constraint v_right_constr_id then 
            {v_nei_eid_1 := ee.id;
             if edge[v_nei_eid_1].vertex[1].id == v_inx then
                {v_nei_vid_1 := edge[v_nei_eid_1].vertex[2].id}
             else
                {v_nei_vid_1 := edge[v_nei_eid_1].vertex[1].id};
            }
        };
     foreach vertex[v_inx].edge ee do 
        {if ee on_constraint v_right_constr_id and not on_constraint v_left_constr_id then 
            {v_nei_eid_2 := ee.id;
             if edge[v_nei_eid_2].vertex[1].id == v_inx then
                {v_nei_vid_2 := edge[v_nei_eid_2].vertex[2].id} 
             else 
                {v_nei_vid_2 := edge[v_nei_eid_2].vertex[1].id}
            }
        };
     /* reset the constraints of the edges which the vertex[v_inx] is on */
     while edge[v_nei_eid_1].__e_constraint_list[1] >0 
        do {unset edge[v_nei_eid_1] constraint edge[v_nei_eid_1].__e_constraint_list[2]};
     while edge[v_nei_eid_2].__e_constraint_list[1] >0 
        do {unset edge[v_nei_eid_2] constraint edge[v_nei_eid_2].__e_constraint_list[2]};
     /* reset the constraints of the vertex[v_inx] */
     while vertex[v_inx].__v_constraint_list[1] >0 
        do { unset vertex[v_inx] constraint vertex[v_inx].__v_constraint_list[2] };
     set vertex[v_inx] constraint v_top_constr_id; 
     set vertex[v_inx].x 0.95*vertex[v_inx].x; 
     set vertex[v_inx].y 0.95*vertex[v_inx].y;
     /* create new vertices */
     new_vid_1 := new_vertex(vertex[v_nei_vid_1].x, vertex[v_nei_vid_1].y, vertex[v_inx].z); 
     set vertex[new_vid_1] constraint v_left_constr_id; 
     set vertex[new_vid_1] constraint v_top_constr_id;
     new_vid_2 := new_vertex(vertex[v_nei_vid_2].x, vertex[v_nei_vid_2].y, vertex[v_inx].z); 
     set vertex[new_vid_2] constraint v_right_constr_id; 
     set vertex[new_vid_2] constraint v_top_constr_id;
     /* create new edges */
     new_eid_1 := new_edge(v_nei_vid_1,new_vid_1); 
     set edge[new_eid_1] constraint v_left_constr_id;
     new_eid_2 := new_edge(new_vid_2,v_nei_vid_2); 
     set edge[new_eid_2] constraint v_right_constr_id;
     new_eid_3 := new_edge(new_vid_1,v_inx); 
     set edge[new_eid_3] constraint v_top_constr_id;
     new_eid_4 := new_edge(v_inx,new_vid_2); 
     set edge[new_eid_4] constraint v_top_constr_id;
     /* create new facets */
     new_fid_1 := new_facet(new_eid_1, new_eid_3, -v_nei_eid_1);
     new_fid_2 := new_facet(new_eid_2, -v_nei_eid_2, new_eid_4);
     facet[new_fid_1].frontbody := body_id;   /* K.B. */
     set facet[new_fid_1] frontcolor lightblue;
     set facet[new_fid_1] backcolor brown;
     set facet[new_fid_1] density 1;
     facet[new_fid_2].frontbody := body_id;
     set facet[new_fid_2] frontcolor lightblue;
     set facet[new_fid_2] backcolor brown;
     set facet[new_fid_2] density 1;
     return; 
   }


