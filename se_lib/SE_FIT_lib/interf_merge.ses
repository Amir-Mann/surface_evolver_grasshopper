// interf_merge.ses
// -- to process interface merging when two interfaces run into each other along a line that is the intersection between two constraints

// Programmer: Yongkang Chen, yongkang@cecs.pdx.edu

// Usage: interf_merge (inx_1, inx_2, id_1, id_2, id_3, id_4, id_5)
// 		  inx_1: id number of the vertex 1
// 		  inx_2: id number of the vertex 2
//         id_1: id number of the constraint for vertex inx_1. 
//         id_2: id number of the constraint for vertex inx_1.
//         id_3: id number of the constraint for vertex inx_2. 
//         id_4: id number of the constraint for vertex inx_2.
//         id_5: id number of the body that the new generated facets should be on
//
//                \                  /
//                 \                /
//            id_4  \              /    id_2
//        ___________\inx_2_______/inx_1__________
//                   /            \
//            id_3  /              \    id_1
//                 /                \
//                /                  \

procedure interf_merge ( integer v_inx_1, integer v_inx_2, integer v_1_constr_id_1, integer v_1_constr_id_2, integer v_2_constr_id_1, integer v_2_constr_id_2, integer body_id )
   { local inx;
     local n_val;
     local ginx;
     local v_nei_eid_1;
     local v_nei_eid_2;
     local v_nei_eid_3;
     local v_nei_eid_4;
     n_val := vertex[v_inx_1].valence; 
     /* find id number of the edges of the vertex that stays on the walls */
     for (inx:=1; inx<n_val+1; inx += 1)
     	{if sum(vertex[v_inx_1].edge[inx], on_constraint v_1_constr_id_1) == 1 then
        	{v_nei_eid_1 := vertex[v_inx_1].edge[inx].id; 
               /* new_edge_id[1] := vertex[v_inx_1].edge[inx].id */
            }
       };
     for (inx:=1; inx<n_val+1; inx += 1)
     	{if sum(vertex[v_inx_1].edge[inx], on_constraint v_1_constr_id_2) == 1 then 
			{v_nei_eid_2  := vertex[v_inx_1].edge[inx].id;
               /* new_edge_id[2] := vertex[v_inx_1].edge[inx].id */
			 list edge[v_nei_eid_2];
            }
       };
     n_val := vertex[v_inx_2].valence; 
     for (inx:=1; inx<n_val+1; inx += 1)
     	{if sum(vertex[v_inx_2].edge[inx], on_constraint v_2_constr_id_1) == 1 then 
			{v_nei_eid_3 := vertex[v_inx_2].edge[inx].id;
               /* new_edge_id[4*(nside-1)+3] := vertex[v_inx_2].edge[inx].id */
            }
       };
     for (inx:=1; inx<n_val+1; inx += 1)
     	{if sum(vertex[v_inx_2].edge[inx], on_constraint v_2_constr_id_2) == 1 then 
			{v_nei_eid_4 := vertex[v_inx_2].edge[inx].id;
               /* new_edge_id[4*(nside-1)+4] := vertex[v_inx_2].edge[inx].id */
			 list edge[v_nei_eid_4];
            }
	};
     /* create new edges */
     new_eid_1 := new_edge(edge[v_nei_eid_1].vertex[1].id, edge[v_nei_eid_3].vertex[2].id);
     set edge[new_eid_1] constraint v_1_constr_id_1;
	 /* set edge[new_eid_1] color yellow; */
     new_eid_2 := new_edge(edge[v_nei_eid_4].vertex[1].id, edge[v_nei_eid_2].vertex[2].id);
     set edge[new_eid_2] constraint v_1_constr_id_2;
	 /* set edge[new_eid_2] color yellow; */
     /* merge the two vertices */
     vertex_merge(vertex[v_inx_1].id, vertex[v_inx_2].id);
     /* remove constraint on the vertices and edges */
     while vertex[v_inx_1].__v_constraint_list[1] >0 
     	do {unset vertex[v_inx_1] constraint vertex[v_inx_1].__v_constraint_list[2]};
     while edge[v_nei_eid_1].__e_constraint_list[1] >0 
       do {unset edge[v_nei_eid_1] constraint edge[v_nei_eid_1].__e_constraint_list[2]};
     while edge[v_nei_eid_2].__e_constraint_list[1] >0 
     	do {unset edge[v_nei_eid_2] constraint edge[v_nei_eid_2].__e_constraint_list[2]};
     while edge[v_nei_eid_3].__e_constraint_list[1] >0 
     	do {unset edge[v_nei_eid_3] constraint edge[v_nei_eid_3].__e_constraint_list[2]};
     while edge[v_nei_eid_4].__e_constraint_list[1] >0 
     	do {unset edge[v_nei_eid_4] constraint edge[v_nei_eid_4].__e_constraint_list[2]};
     /*set vertex[v_inx_1].x 0.95*vertex[v_inx_1].x; */
     /*set vertex[v_inx_1].z 0.95*vertex[v_inx_1].z; */
     /* create new facets */
     new_fid_1 := new_facet(-edge[v_nei_eid_1].id, new_eid_1, -edge[v_nei_eid_3].id);
     facet[new_fid_1].frontbody := body_id ;
     set facet[new_fid_1] frontcolor lightblue;
     set facet[new_fid_1] backcolor brown;
     set facet[new_fid_1] density 1;
     new_fid_2 := new_facet(-edge[v_nei_eid_2].id, -edge[v_nei_eid_4].id, new_eid_2);
     facet[new_fid_2].frontbody := body_id ;
     set facet[new_fid_2] frontcolor lightblue;
     set facet[new_fid_2] backcolor brown;
     set facet[new_fid_2] density 1;
   }



