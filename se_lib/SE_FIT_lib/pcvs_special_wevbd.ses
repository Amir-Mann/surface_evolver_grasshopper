// pcvs_special_wevbd.ses
// supplementary command scripts for the stability computation for
// wall-edge-vertex-bound drops
// History of modification:
// May 15, 2011: Original version

quiet on

//x_min := -1

x_min := -0.6
x_min_check := { if ( script_core_result == 1 ) then 
    { get_x_min_current; 
      if ( x_min_current < x_min ) then 
        { printf "x_min exceeded\n"; 
          limit_break_msg := "x_min exceeded"; 
          script_core_result := 0
        }
    }
}

symmetry_limit_check := { x_min_check }

eigenvalue_study_idx := 1

vert_fix_idx := 1

// It is necessary to fix vertices pinned along the wall edges, except for the one where the contact line meets the wall edge
// to remove unnecessary negative eigenvalues.

vert_fix       := {local pin_ver_y_min;
				   local pin_ver_y_max;
				   set vertex where hit_constraint pinning_edge_1 fixed;
				   set vertex where hit_constraint pinning_edge_2 fixed;
				   if count(vertex where hit_constraint pinning_edge_1, id) > 0 then
						{pin_ver_y_min := min(vertex where hit_constraint pinning_edge_1, y)
						}
				   else
						{pin_ver_y_min := min(vertex where hit_constraint pinning_edge_2, y)
						};
				   if count(vertex where hit_constraint pinning_edge_2, id) > 0 then
						{pin_ver_y_max := max(vertex where hit_constraint pinning_edge_2, y);
						}
				   else
						{pin_ver_y_max := max(vertex where hit_constraint pinning_edge_1, y);
						};
				   foreach vertex vv where hit_constraint pinning_edge_1 do 
						{if vv.y == pin_ver_y_min then 
							{if vv.fixed > 0 then 
								{unset vv fixed
								}
							}
						};
				   foreach vertex vv where hit_constraint pinning_edge_2 do 
						{if vv.y == pin_ver_y_max then 
							{if vv.fixed > 0 then 
								{unset vv fixed
								}
							}
						};
				   }
				   
vert_unfix     := {unset vertex where hit_constraint pinning_edge_1 fixed;
				   unset vertex where hit_constraint pinning_edge_2 fixed;
				  }

refine_special := {long_edge_count_1 := count(edge where on_constraint wall and length > 0.75*length_threshold, id);
                   while (long_edge_count_1 > 0) do
						{refine edge where on_constraint wall and length > 0.75*length_threshold;
						 long_edge_count_1 := count(edge where on_constraint wall and length > 0.75*length_threshold, id)
						};
                  }
				  
//get_x_min_old := {x_min_old := min(vertex where not fixed, (x+y/TANA)*SINA); printf "x_min_old := %12.6f\n", x_min_old}
//get_x_min_current := {x_min_current := min(vertex where not fixed, (x+y/TANA)*SINA)}

dimension_limit_adjust := {z_max_adjust; z_min_adjust}
special_limit_criteria := {if min(vertex where on_constraint wall, z) < -0.01 then
					{printf "Contact line detachment detected\n"; 
					 limit_break_msg := sprintf "Contact line detachment detected";
					 script_core_result := 0; 
					};
				} 

convergence_special_operation := 	{/* printf "<----- START of convergence_special_operation ----->\n"; */
									 foreach vertex vv where not fixed and vv.y > 0 do {
												if vv.y - vv.x*TANA > 0 then
													{if vv.on_constraint wall_plus == 1 then
														{unset vv constraint wall_plus
														}
													}
												else
													{if vv.on_constraint wall == 0 then
														{if vv.on_constraint wall_plus == 0 then
															{set vv constraint wall_plus
															}
														}
													 
													}
												};
									 foreach vertex vv where not fixed and vv.y <= 0 do {
												if vv.y + vv.x*TANA < 0 then
													{if vv.on_constraint wall_plus == 1 then
														{unset vv constraint wall_plus
														}
													}
												else
													{if vv.on_constraint wall == 0 then
														{if vv.on_constraint wall_plus == 0 then
															{set vv constraint wall_plus
															}
														}
													 
													}
												};
									 v_hit_constr_count := count(vertex where hit_constraint wall_plus, id);
									 if v_hit_constr_count > 1 then
										{rawestv; 
										};
									 v_hit_constr_count := count(vertex where hit_constraint wall_plus, id);
									 if v_hit_constr_count > 1 then
										{rawestv; 
										 v_hit_constr_count :=0
										};
									 /* v_hit_constr_count_1 := count(vertex where hit_constraint pinning_edge_1, id) + count(vertex where hit_constraint pinning_edge_2, id);
									 while (v_hit_constr_count_1 == 0) do
										{
										 set vertex where not fixed x x-0.1;
										 v_hit_constr_count_1 := count(vertex where hit_constraint pinning_edge_1, id) + count(vertex where hit_constraint pinning_edge_2, id);
										};*/
									 /* printf "<----- END of convergence_special_operation ----->\n"; */
									 }
quiet off
     






