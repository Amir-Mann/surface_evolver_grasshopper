import rhinoscriptsyntax as rs
import Rhino.Geometry as rg
from collections import defaultdict

NormalsDir=-1

def get_mesh_data(mesh):
    
    # Extract vertices
    
    # Create a dictionary to map vertex positions to their indices. Vertices indexing begins from 0
    vertex_indices = {}
    for i in range(mesh.Vertices.Count):
        vertex = mesh.Vertices.Point3dAt(i)
        if vertex not in vertex_indices:
            vertex_indices[vertex] = i

    # Create a map to make unique vertices ids
    vertex_map = {}
    for i in range(mesh.Vertices.Count):
        vertex_map[i] = vertex_indices[mesh.Vertices.Point3dAt(i)]

      
    # Extract edges
    
    # Create a dictionary to map edge tuples to their indices
    edge_indices = {}  

    # Extract faces and identify fixed edges. Edges indexing begins from 1
    faces = []
    fixed_edges = [1] * (mesh.Faces.Count *3)
    edge_index = 1

    for i in range(mesh.Faces.Count):
        face = mesh.Faces[i]
        face_vertices = [vertex_map[face.A], vertex_map[face.B], vertex_map[face.C]]

        face_edges = []
        for j in range(len(face_vertices)):
            edge = (face_vertices[j], face_vertices[(j + 1) % len(face_vertices)])
            
            # Ensure the edge is ordered consistently
            if (edge[1], edge[0]) in edge_indices.keys():
                index = edge_indices[(edge[1], edge[0])]
                face_edges.append(-index)
                fixed_edges[index] = 0
                    
            else:
                edge_indices[edge] = edge_index
                face_edges.append(edge_index)
                edge_index += 1 
         
        
        faces.append(face_edges)

    # Identify fixed vertices
    fixed_vertices = [0] * len(mesh.Vertices)
    for edge in edge_indices.keys():
        if fixed_edges[edge_indices[edge]] == 1:
            fixed_vertices[edge[0]] = 1
            fixed_vertices[edge[1]] = 1        


    # Create fixed faces
    edges_map = defaultdict(list)
    for edge in edge_indices:
        if fixed_edges[edge_indices[edge]] == 1:
            edges_map[edge[0]] = edge
    
    visited_edges = [0] * (len(edge_indices) + 1)
    fixed_faces = []

    for edge in edge_indices:
        i = edge_indices[edge]
        if visited_edges[i] == 0 and fixed_edges[i] == 1:
            start_edge = edge
            cur_edge = start_edge
            face_edges = [i]
            visited_edges[i] = 1
            next_vertex = cur_edge[1]
            
            while 1:
                next_edge = edges_map[next_vertex]   
                if next_edge == start_edge:
                    break
                
                next_edge_index = edge_indices[next_edge]    
                face_edges.append(next_edge_index)
                visited_edges[next_edge_index] = 1 
                cur_edge = next_edge
                next_vertex = next_edge[1]
                
            fixed_faces.append(face_edges)
    
    return vertex_indices, fixed_vertices, edge_indices, fixed_edges, faces, fixed_faces

def main(mesh):
    if mesh is None:
        return {}, [], {}, [], [], []
    
    return get_mesh_data(mesh)

# Run the main function and set the outputs
if x:
    vertices, fixed_vertices, edges, fixed_edges, faces, fixed_faces = main(x)

with open("D:\TECHNION\geometry project\example.fe", 'w') as fileID:
    
    # Write vertices
    fileID.write('vertices\n')
    for v, i in vertices.items():
        if fixed_vertices[i] == 0:
            fileID.write(f"{i+1} {v.X:.2f} {v.Y:.2f} {v.Z:.2f}\n")
        else:
            fileID.write(f"{i+1} {v.X:.2f} {v.Y:.2f} {v.Z:.2f} fixed\n")    

    # Write edges
    fileID.write('\nedges\n')
    for edge, index in edges.items():
        if fixed_edges[index] == 0:
            fileID.write(f"{index}\t{edge[0]+1} {edge[1]+1}\n")
        else:
           fileID.write(f"{index}\t{edge[0]+1} {edge[1]+1} fixed\n")

    # Write faces
    fileID.write('\nfaces\n')
    face_index = 1
    for face in faces:
        single_line = " ".join(map(str, face))
        fileID.write(f"{face_index}\t{single_line}\n")
        face_index+=1
    for face in fixed_faces:
        face = [-NormalsDir * e for e in face]  
        single_line = " ".join(map(str, face))
        fileID.write(f"{face_index}  {single_line} fixed\n")  # With a minus sign, to indicate opposite direction for normals to be consistent  
        face_index+=1  

    # Write bodies
    fileID.write('\nbodies\n')
    fileID.write('1\t')
    face_index = 1
    for face in faces:
        fileID.write(f"{NormalsDir * (face_index)} ")
        face_index += 1
    for face in fixed_faces:
        fileID.write(f"{-NormalsDir * (face_index)} ")
        face_index += 1    
    
    fileID.write('density 1 volume 1\n\n')


    fileID.write('read\n')  # additional commands to to Surface Evolver
    fileID.write('N\n')  # Set target volume to actual volume
    fileID.write('set edge color 4 where fixed\n')
