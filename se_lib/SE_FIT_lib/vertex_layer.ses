// vertex_layer.cmd
// Evolver command to divide vertices on a constraint into layers,
// the contact line is a closed curve and the layer of the vertices on the contact line
// is assigned with value 1

// Programmer: Yongkang Chen, yongkang@cecs.pdx.edu

// Usage: vertex_layer_id(id)  

define vertex attribute layer integer
define vertex attribute __v_neighbour_list integer[10]

function integer vertex_layer_id (integer constraint_id) 
{
	local layer_inx;
	local v_count; 
	layer_inx := 1; 
	v_count := 2;
	foreach vertex vv where (sum(vv.edge ee, ee on_constraint constraint_id)>0) 
		and sum(vv.edge ee, ee on_constraint constraint_id)<vv.valence
		 do {vv.layer := layer_inx};    /* identify vertices on the contact line */
	layer_inx +=1; 
	v_count := count(vertex where on_constraint constraint_id and layer ==0, id); 
	printf "layer = %d, v_count = %f\n", layer_inx, v_count;
	while (v_count >= 1) do
		{local inx; 
		 local vid;
		 foreach edge ee1 where (on_constraint constraint_id)
             and (ee1.vertex[1].layer + ee1.vertex[2].layer == layer_inx-1)
              do                        /* identify edge with only one vertex labled in previous layer */
				{if ee1.vertex[1].layer == layer_inx-1 then 
					{ee1.vertex[2].layer := layer_inx; 
					 inx := ee1.vertex[2].__v_neighbour_list[1]; 
					 ee1.vertex[2].__v_neighbour_list[1] := inx+1;                /* number of neighbouring vertex */
					 ee1.vertex[2].__v_neighbour_list[inx+2] := ee1.vertex[1].id;  /* id of the nerighbouring vertex */
					 vid := ee1.vertex[2].id;
					 foreach vertex[vid].edge ee2 where ee2.id != ee1.id do
						{if ee2.vertex[1].id == vid then
							{if ee2.vertex[2].layer == layer_inx-1 then
								{inx := vertex[vid].__v_neighbour_list[1];
								 vertex[vid].__v_neighbour_list[1] := inx+1;
								 vertex[vid].__v_neighbour_list[inx+2] := ee2.vertex[2].id
								}
							}
						 else
							{if ee2.vertex[1].layer == layer_inx-1 then
								{inx := vertex[vid].__v_neighbour_list[1];
								 vertex[vid].__v_neighbour_list[1] := inx+1;
								 vertex[vid].__v_neighbour_list[inx+2] := ee2.vertex[1].id
								}
							}
						}
					}; 
				 if ee1.vertex[2].layer == layer_inx-1 then 
					{ee1.vertex[1].layer := layer_inx;
					 inx:= ee1.vertex[1].__v_neighbour_list[1]; 
					 ee1.vertex[1].__v_neighbour_list[1] := inx+1;
					 ee1.vertex[1].__v_neighbour_list[inx+2] := ee1.vertex[2].id;
					 vid := ee1.vertex[1].id;
					 foreach vertex[vid].edge ee2 where ee2.id != ee1.id do
						{if ee2.vertex[1].id == vid then
							{if ee2.vertex[2].layer == layer_inx-1 then
								{inx := vertex[vid].__v_neighbour_list[1];
								 vertex[vid].__v_neighbour_list[1] := inx+1;
								 vertex[vid].__v_neighbour_list[inx+2] := ee2.vertex[2].id
								}
							}
						 else
							{if ee2.vertex[1].layer == layer_inx-1 then
								{inx := vertex[vid].__v_neighbour_list[1];
								 vertex[vid].__v_neighbour_list[1] := inx+1;
								 vertex[vid].__v_neighbour_list[inx+2] := ee2.vertex[1].id
								}
							}
						}
					}
				};
				layer_inx+=1; 
				v_count := count(vertex where on_constraint constraint_id and layer ==0, id); 
				printf "layer = %d, v_count = %f\n", layer_inx, v_count;
		};
	return layer_inx;
            }
