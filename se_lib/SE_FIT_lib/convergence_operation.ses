// convergence_operation.ses
// -- Scripts for the operation of the convergence of the computation

// Programmer: Yongkang Chen, yongkang@cecs.pdx.edu
// 9/29/2010
// 
// History of modofication:
// Sept. 28, 2006 original version
//
// Usage: mesh_converg_vertex_number : for convergence with refinement of the mesh based on a given vertex number target
// 	     mesh_converg_edge_length : for convergence with refinement of the mesh based on a given edge length target
//              convergence_w_jiggle : for convergence with jiggling  
//                  convergence_deep : for deep convergence
//             convergence_operation : for general control of the convergence operations.
//
// 9/11/09, vertex_number/vertex_number_notfixed >= 3.5 changed to 1e6, basically disabling this option. 
// 3.5 causes some trouble in computing the interface in fuel tanks.
// The part below is replaced with a single line: if script_core_result == 0 then break;
//
convergence_time_initial := date_and_time
convergence_time_final := date_and_time
number_iteration := 100 // AMIR CHANGED THIS
//
convergence_time_print :=	      { 
					printf "Number of iteration: %f\n", number_iteration;
					printf "Started at: %s\n",convergence_time_initial; 
					printf "Ended at: %s\n",convergence_time_final;
				      }
//
get_error := {if mesh_res_idx == 1 then
					{error := error_rough; 
					 epsilon_e := epsilon_e_rough; 
					 error_deep_conv_limit := error_rough*1e-3;
					};
				 if mesh_res_idx == 2 then
					{if length_threshold/length_threshold_max > 2 then
						{error := error_medium*10;  
						 epsilon_e := epsilon_e_medium*10;
						 error_deep_conv_limit := error_medium*1e-2;
						}
					 else
						{error := error_medium; 
						 epsilon_e := epsilon_e_medium; 
						 error_deep_conv_limit := error_medium*1e-3;
						}
					};
				 if mesh_res_idx == 3 then
					{if length_threshold/length_threshold_max > 4 then
						{error := error_fine*100; 
						 epsilon_e := epsilon_e_fine*100;
						 error_deep_conv_limit := error_fine*1e-1;
						}
					 else
						{if length_threshold/length_threshold_max > 2 then
							{error := error_fine*10; 
							 epsilon_e := epsilon_e_fine*10;
							 error_deep_conv_limit := error_fine*1e-2;
							}
						 else
							{error := error_fine;  
							 epsilon_e := epsilon_e_fine; 
							 error_deep_conv_limit := error_fine*1e-3;
							}
						}
					}
			 }

MAX_STEPS := 5;
ps_conv_run_unit := {
					 local conv_run_ct;
					 conv_run_ct := 0;
					 total_e_old := total_energy;
					 if do_mesh_smooth == 1 then
						{mesh_smooth};
					 get_error;
					 convergence_scheme;
					 total_number_iteration := number_iteration;
					 /* total_number_iteration[total_number_iteration_idx] := number_iteration;
					 total_number_iteration_idx += 1;
					 if get_equilibrium_idx == 1 then 
						{get_equilibrium}; */
					 get_total_e_diff;
					 iterations_count := 1;
					 if deep_conv_idx == 1 then
						{
						 while (script_core_result == 1 && error >= error_deep_conv_limit && iterations_count < MAX_STEPS) do
							{
							 while (total_e_diff >= epsilon_e && script_core_result == 1 && iterations_count < MAX_STEPS) do
								{iterations_count := iterations_count + 1;
								 number_iteration_old := number_iteration;
								 save_XYZ_Dim;
								 convergence_scheme;
								 get_XYZDimVar;
								 get_total_e_diff;
								 conv_run_ct += 1;
								 if conv_run_ct > 3 then 
									{print "Three runs of convergence_scheme completed\n";
									 break; 
									 /* script_core_result := 0 this would confuse PSF CVS */
								    } 
								};
							 /* if (number_iteration - number_iteration_old) < 9 then
								 {break;
								 }; */
							 conv_run_ct := 0;
							 error := error*0.1;
							 epsilon_e := epsilon_e*0.1;
							 printf "error : %e\n", error;
							 printf "epsilon_e : %e\n", epsilon_e;
							};
						}
					 else
						{
						 while (total_e_diff >= epsilon_e && script_core_result == 1 && iterations_count < MAX_STEPS) do
							{iterations_count := iterations_count + 1;
							 convergence_scheme;
							 get_total_e_diff;
							 conv_run_ct += 1;
							 if conv_run_ct > 3 then 
								{print "Three runs of convergence_scheme completed\n";
								 break;
								}
							};
						};
					 if iterations_count == MAX_STEPS then
					 {
					  printf "NOTE: MAX_STEPS exceeded, update by setting 'MAX_STEPS := 100' for example\n";
					 };
					 
					 printf "total_e_diff :";
					 print total_e_diff;
					 /* script_core_result := 1; */
					}
					
// maybe should consider adding another condition regarding a minimum edge length after total_e_diff >= 0.1	
// a practical value for total_e_diff at fine convergence is 0.1 (old definition, with 100*error in get_total_e_diff, without 100, should be 0.001)			
mesh_optimization := {	local ps_conv_run_ct;
						ps_conv_run_ct := 0;
						printf "<----- Start of mesh_optimization ----->\n";
						if refine_mode_idx == 1 then
							{r; find_lt}
						else
							{length_threshold := length_threshold*0.9;
							 printf "length_threshold := %f\n", length_threshold
							};
						U 2;
						ps_conv_run_unit;
						while (total_e_diff >= epsilon_em && script_core_result == 1) do
							{if refine_mode_idx == 1 then
								{r; find_lt}
							 else
								{length_threshold := length_threshold*0.9;
								 printf "length_threshold := %f\n", length_threshold
								};
							 U 2;
							 ps_conv_run_unit;
							 /* ps_conv_run_ct += 1;
							 if ps_conv_run_ct > 3 then 
								{print "Three runs of ps_conv_run_unit in mesh_optimization completed\n";
								 break;
								} */
							};
						printf "<----- End of mesh_optimization ----->\n";
					}
					
// a practical value for total_e_diff at fine convergence is 0.01 (old definition, with 100*error, without 100, should be 0.0001)		
energy_conv_run := {local conv_run_ct;
					 printf "<----- Start of energy_conv_run ----->\n";
					 /* total_number_iteration_idx := 2; */
					 mesh_setting; 
					 if mesh_res_idx == 1 then
						{if char_length == 0 then
							{if base_max_edge_length*edge_length_factor < length_threshold then
								{length_threshold_max := base_max_edge_length*edge_length_factor
								}
							}
						 else
							{if char_length < length_threshold then
								{length_threshold_max := char_length
								}
							}
						}
					 else
						{if mesh_res_idx == 2 then
							{if char_length == 0 then
								{if base_max_edge_length*edge_length_factor/4 < length_threshold then
									{length_threshold_max := base_max_edge_length*edge_length_factor/4
									}
								}
							 else
								{if char_length/4 < length_threshold then
									{length_threshold_max := char_length/4
									}
								}
							}
						 else
							{if char_length == 0 then
								{if base_max_edge_length*edge_length_factor/8 < length_threshold then
									{length_threshold_max := base_max_edge_length*edge_length_factor/8
									}
								}
							 else
								{if char_length/8 < length_threshold then
									{length_threshold_max := char_length/8
									}
								}
							}
						};
					 get_error;
					 ps_conv_run_unit;	
					 /* error := error_ini; */
					 while (length_threshold > length_threshold_max && script_core_result == 1) do
						{
						 if length_threshold/length_threshold_max > 3 then
							{if deep_conv_idx == 1 then
								{length_threshold := 0.98*length_threshold}
							 else
								{length_threshold := 0.5*length_threshold}
							}
						 else
							{if deep_conv_idx == 1 then
								{length_threshold := 0.98*length_threshold}
							 else
								{length_threshold := (0.99 - 0.2*(length_threshold/length_threshold_max - 1))*length_threshold};
							};
						 printf "length_threshold : %f\n", length_threshold;
						 ps_conv_run_unit; 
						};
					 if mesh_optimization_idx == 1 then
						{mesh_optimization;
						 mesh_optimization_idx := 0
						};
					 /* error := error_ini; 
					 while (total_e_diff >= epsilon_e) do
						{error += 0;
						 set_error; 
						 ps_conv_run_unit;
						}; */
					 if get_equilibrium_idx == 1 then 
						{get_equilibrium};
					 printf "<----- End of energy_conv_run ----->\n";
					}
					
//						 conv_run_ct := 0;
//						 while (total_e_diff >= epsilon_e && script_core_result == 1) do
//							{error += 0;
//							 get_error;
//							 ps_conv_run_unit;
//							 conv_run_ct += 1;
//							 printf "conv_run_ct : %d\n", conv_run_ct;
//							 if conv_run_ct > 3 then 
//								{print "Three runs of ps_conv_run_unit completed\n";
//								 break
//								}
//							};
					
mesh_homogen_ratio := 100

mesh_homogenize := {
						 mesh_optimization_idx := 0;
						 if mesh_res_idx == 1 then
							{mesh_homogen_ratio := 30
							}
						 else
							{if mesh_res_idx == 2 then
								 {mesh_homogen_ratio := 20
								 }
							 else
								{if mesh_res_idx == 3 then
									{mesh_homogen_ratio := 10
									}
								}
							};
						 if min_edge_length > 0 then
							{current_min_edge_length := min_edge_length
							}
						 else
							{current_min_edge_length := min(edge where not fixed and no_refine, length)
							};
						 while max(edge where not fixed and not no_refine, length)/current_min_edge_length > mesh_homogen_ratio do
							{refine edge where not fixed and not no_refine and length > (mesh_homogen_ratio-1)*current_min_edge_length;
							 find_lt;
							 error := 1e-4;
							 epsilon_e := 1e-4;
							 energy_conv_run;
							 if script_core_result == 0 then {break};
							 };
						 mesh_optimization_idx := 1;
					}

dim_conv_run := {
				 if mesh_res_idx == 1 then
					{XYZ_DimVarMax_Error := 0.001
					}
				 else
					{if mesh_res_idx == 2 then
						 {XYZ_DimVarMax_Error := 0.001
						 }
					 else
						{if mesh_res_idx == 3 then
							{XYZ_DimVarMax_Error := 0.001
							}
						}
					};
				 get_XYZ_MaxMin;
				 save_XYZ_Dim;
				 energy_conv_run;
				 get_XYZDimVar;
				 while (XYZ_DimVarMax >= XYZ_DimVarMax_Error && script_core_result == 1) do
					{
					 save_XYZ_Dim;
					 energy_conv_run;
					 get_XYZDimVar;
					};
				}
				
quick_conv_run := {iteration_step 8;
				   V; u; U 2; 
				   iteration_step 5; 
				   V; u; 
				   if hessian_seek_idx == 1 then {hessian_seek 5};
				   iteration_step 2} // hessian_seek causes trouble in corner wicking

// the dimension variations along x,y,z are checked to help determine the convergence.
// for closed surface, it might be better to check the mass centre variation					

ps_conv_run_rough := 	{
						 printf "<----- Start of ps_conv_run_rough ----->\n";
	 					 clock_read_begin := clock;
						 timeout_period_check := 1;
						 mesh_res_idx := 1;
						 M 1;
						 mesh_homogenize; 
						 /* error := 1e-4; 
						 epsilon_e := 1e-4; 
						 epsilon_em := 1e-2; 	*/	
						 mesh_optimization_idx := 0;
						 dim_conv_run;
						 printf "script_core_result = %d\n", script_core_result;
						 clock_read_end := clock;
						 printf " Convergence operation starts at : %f\n", clock_read_begin;
						 printf "   Convergence operation ends at : %f\n", clock_read_end;
						 printf "Convergence Total operation time : %f\n", clock_read_end - clock_read_begin;
						 get_stats;
						 histogram_update;
						 timeout_period_check := 0;
						 printf "<----- End of ps_conv_run_rough ----->\n";
						}

ps_conv_run_current := 	{
						 printf "<----- Start of ps_conv_run_rough ----->\n";
	 					 clock_read_begin := clock;
						 mesh_res_idx := 1;
						 M 1;
						 /* error := 1e-4; 
						 epsilon_e := 1e-4; 
						 epsilon_em := 1e-2; 	*/	
						 mesh_optimization_idx := 0;
						 dim_conv_run;
						 printf "script_core_result = %d\n", script_core_result;
						 clock_read_end := clock;
						 printf " Convergence operation starts at : %f\n", clock_read_begin;
						 printf "   Convergence operation ends at : %f\n", clock_read_end;
						 printf "Convergence Total operation time : %f\n", clock_read_end - clock_read_begin;
						 get_stats;
						 histogram_update;
						 printf "<----- End of ps_conv_run_rough ----->\n";
						}

//ps_conv_run_current := ps_conv_run_rough
						
ps_conv_run_medium := 	{
						 printf "<----- Start of ps_conv_run_medium ----->\n";
	 					 clock_read_begin := clock;
						 mesh_res_idx := 2;
						 M 1;
						 mesh_homogenize; 
						 /* error := 1e-5;
						 epsilon_e := 1e-5; 
						 epsilon_em := 1e-3; 	*/				
						 mesh_optimization_idx := 0;
						 dim_conv_run;
						 printf "script_core_result = %d\n", script_core_result;
						 clock_read_end := clock;
						 printf " Convergence operation starts at : %f\n", clock_read_begin;
						 printf "   Convergence operation ends at : %f\n", clock_read_end;
						 printf "Convergence Total operation time : %f\n", clock_read_end - clock_read_begin;
						 get_stats;
						 histogram_update;
						 printf "<----- End of ps_conv_run_medium ----->\n";
						}
						
//ps_conv_run_medium := ps_conv_run_rough //use it for PSF CVS test
						
ps_conv_run_fine := 	{
						 printf "<----- Start of ps_conv_run_fine ----->\n";
	 					 clock_read_begin := clock;
						 mesh_res_idx := 3;
						 M 1;
						 mesh_homogenize;
						 /* error := 1e-6;
						 epsilon_e := 1e-6; 
						 epsilon_em := 1e-4;  */					
						 mesh_optimization_idx := 0;
						 dim_conv_run;
						 printf "script_core_result = %d\n", script_core_result;
						 clock_read_end := clock;
						 printf " Convergence operation starts at : %f\n", clock_read_begin;
						 printf "   Convergence operation ends at : %f\n", clock_read_end;
						 printf "Convergence Total operation time : %f\n", clock_read_end - clock_read_begin;
						 get_stats;
						 histogram_update;
						 printf "<----- End of ps_conv_run_fine ----->\n";
						}
						
//ps_conv_run_fine := ps_conv_run_rough //use it for PSF CVS test

ps_conv_run_fine_test := 	{
						 printf "<----- Start of ps_conv_run_fine ----->\n";
	 					 clock_read_begin := clock;
						 /*length_threshold := max(edge where not fixed, length); */
						 /* mesh_optimization_idx := 1; */
						 mesh_optimization_idx := 0;
						 if min_edge_length > 0 then
							{current_min_edge_length := min_edge_length
							}
						 else
							{current_min_edge_length := min(edge where not fixed, length)
							};
						 while max(edge where not fixed, length)/current_min_edge_length > 20 do
							{refine edge where not fixed and not no_refine and length > 20*current_min_edge_length;
							 find_lt;
							 error := 1e-3;
							 energy_conv_run;
							 };
						 mesh_optimization_idx := 1;
						 error := 1e-3;
						 energy_conv_run;
						 mesh_res_idx := 5;
						 printf "script_core_result = %d\n", script_core_result;
						 clock_read_end := clock;
						 printf " Convergence operation starts at : %f\n", clock_read_begin;
						 printf "   Convergence operation ends at : %f\n", clock_read_end;
						 printf "Convergence Total operation time : %f\n", clock_read_end - clock_read_begin;
						 printf "<----- End of ps_conv_run_fine ----->\n";
						}
					
						
ps_conv_run_hessian := {find_lt;
						{iteration_step;
						 if do_mesh_smooth == 1 then {mesh_smooth};
						 convergence_special_operation}5;
						if get_equilibrium_idx == 1 then 
							{get_equilibrium};
						printf "lowest_eigen = %f\n", last_eigenvalue;
						printf "script_core_result = %d\n", script_core_result;
					   }
					   
 
//ps_conv_run_rough := 	{
//						 printf "<----- Start of ps_conv_run_rough ----->\n";
//	 					 clock_read_begin := clock;
//						 error := 1e-5;
//						 set_error;
//						 if max(edge where not fixed, length) < 2*base_max_edge_length*edge_length_factor then
//							{find_lt
//							}
//						 else
//							{length_threshold := 2*base_max_edge_length*edge_length_factor
//							}; 
//						 printf "length_threshold : %f\n", length_threshold;
//						 convergence_scheme; 
//						 /* length_threshold_max := 2*base_max_edge_length*edge_length_factor; 
//						 mesh_converg_edge_length; */
//						 /* {V; u}3; */
//						 if get_equilibrium_idx == 1 then 
//							{get_equilibrium};
//						 if count(edge where not fixed and length > 2*length_threshold, id)/count(edge where not fixed, id) > 0.5 then
//							{r;
//							 find_lt;
//							};
//						 if max(edge where not fixed, length) < base_max_edge_length*edge_length_factor then
//							{find_lt
//							}
//						 else
//							{length_threshold := base_max_edge_length*edge_length_factor;
//							 error := 1e-5;
//							 set_error;
//							 convergence_scheme; 
//							}; 
//						 /* length_threshold_max := base_max_edge_length*edge_length_factor;
//						 mesh_converg_edge_length; */
//						 /* energy_conv_run; */
//						 mesh_res_idx := 1;
//						 printf "script_core_result = %d\n", script_core_result;
//						 clock_read_end := clock;
//						 printf " Convergence operation starts at : %f\n", clock_read_begin;
//						 printf "   Convergence operation ends at : %f\n", clock_read_end;
//						 printf "Convergence Total operation time : %f\n", clock_read_end - clock_read_begin;
//						 printf "<----- End of ps_conv_run_rough ----->\n";
//						} 
//
//ps_conv_run_medium := 	{
//						 printf "<----- Start of ps_conv_run_medium ----->\n";
//						 ps_conv_run_rough;
//						 {V; u}3;
//						 if count(edge where not fixed and length > 2*length_threshold, id)/count(edge where not fixed, id) > 0.5 then
//							{r};
//						 length_threshold := base_max_edge_length*edge_length_factor/2;
//						 error := 1e-6;
//						 set_error;
//						 energy_conv_run;
//						 mesh_res_idx := 2;
//						 printf "<----- End of ps_conv_run_medium ----->\n";
//						}
//						
//ps_conv_run_fine := 	{
//						 printf "<----- Start of ps_conv_run_fine ----->\n";
//						 ps_conv_run_medium;
//						 if count(edge where not fixed and length > 2*length_threshold, id)/count(edge where not fixed, id) > 0.5 then
//							{r};
//						 length_threshold := base_max_edge_length*edge_length_factor/4;
//						 error := 1e-7;
//						 set_error;
//						 energy_conv_run;
//	 					 printf "script_core_result = %d\n", script_core_result;
//						 mesh_res_idx := 3;
//						 printf "<----- End of ps_conv_run_fine ----->\n";
//						}

//ps_conv_run_vfine := 	{
//						 printf "<----- Start of ps_conv_run_vfine ----->\n";
//						 ps_conv_run_fine;
//						 if count(edge where not fixed and length > 2*length_threshold, id)/count(edge where not fixed, id) > 0.5 then
//							{r};
//						 length_threshold := base_max_edge_length*edge_length_factor/8;
//						 error := 1e-8;
//						 set_error;
//						 energy_conv_run;
//						 mesh_res_idx := 4;
//						 printf "<----- End of ps_conv_run_vfine ----->\n";
//						}
 				   