//vertex_constraint_distance.ses

define vertex attribute dist_to_wall real[wall_count]
define vertex attribute adjacent_wall_id integer[wall_count]

procedure vertex_to_wall_distance (integer v_id)
	{
	 for (idx := 1; idx < wall_count + 1; idx += 1)
		{
		 vertex[v_id].adjacent_wall_id[idx] := idx;
		 vertex[v_id].dist_to_wall[idx] := abs(vertex[v_id].x*wall_dir_cos_alpha[idx]+ vertex[v_id].y*wall_dir_cos_beta[idx] + vertex[v_id].z*wall_dir_cos_gamma[idx] - wall_dist_quant_p[idx])
		};
	 for (idx := 1; idx < facet_count + 1; idx += 1)
		{
		 for (idx_in := idx + 1; idx_in < wall_count + 1; idx_in += 1)
			{
			 if vertex[v_id].dist_to_wall[idx] > vertex[v_id].dist_to_wall[idx_in] then
				{
				 value_temp := vertex[v_id].dist_to_wall[idx];
				 vertex[v_id].dist_to_wall[idx] := vertex[v_id].dist_to_wall[idx_in];
				 vertex[v_id].dist_to_wall[idx_in] := value_temp;
				 value_temp := vertex[v_id].adjacent_wall_id[idx];
				 vertex[v_id].adjacent_wall_id[idx] := vertex[v_id].adjacent_wall_id[idx_in];
				 vertex[v_id].adjacent_wall_id[idx_in] := value_temp
				}
			}
		}
	}
	 

procedure vertex_constraint_assign ()
	{
	 foreach vertex vv where not fixed do
		{
		 vertex_to_wall_distance (vv.id);
		 constraint_matching (vv.id, vv.adjacent_wall_id[1]);
		 constraint_matching (vv.id, vv.adjacent_wall_id[2]);
		 constraint_matching (vv.id, vv.adjacent_wall_id[3]);
		};
	}

//convergence_special_operation := 
//			{if vertex_number_changed_idx == 1 then
//				{
//				 foreach vertex vv where not fixed do
//					{
//		 	 		 while vv.__v_constraint_list[1] > 0 do 
//						{unset vv constraint vv.__v_constraint_list[2]};
//					 vertex_to_wall_distance (vv.id);
//		 			 constraint_matching (vv.id, vv.adjacent_wall_id[1]);
//					 constraint_matching (vv.id, vv.adjacent_wall_id[2]);
//					 constraint_matching (vv.id, vv.adjacent_wall_id[3]);
//					}
//				}
//			}

convergence_special_operation := 
				{
				 foreach vertex vv where not fixed do
					{
		 	 		 while vv.__v_constraint_list[1] > 0 do 
						{unset vv constraint vv.__v_constraint_list[2]};
					 vertex_to_wall_distance (vv.id);
		 			 constraint_matching (vv.id, vv.adjacent_wall_id[1]);
					 constraint_matching (vv.id, vv.adjacent_wall_id[2]);
					 constraint_matching (vv.id, vv.adjacent_wall_id[3]);
					}
				}

procedure contact_line_display () 
				{
				 set facet where not fixed color lightgray; 
              		 set edge where not fixed color black;
              			 foreach facet ff where not fixed do
						{for (idx := 2; idx < 5; idx += 1)
						 	{
							 sum1 := ff.vertex[1].hit_constraint ff.vertex[1].__v_constraint_list[idx];
							 sum2 := ff.vertex[2].hit_constraint ff.vertex[2].__v_constraint_list[idx];
							 sum3 := ff.vertex[3].hit_constraint ff.vertex[3].__v_constraint_list[idx];
							 if sum1 == 1 && sum2 == 1 && sum3 == 1 then 
								{set ff color clear;
								 ff.fhide := 1;
								 break;
								}
						 	 else
								{set ff color lightgray;
								 ff.fhide := 0;
								}
							};
						};
				 foreach edge ee where not fixed && valence == 2 do 
					{if ee.facet[1].color == clear && ee.facet[2].color == clear then 
						{set ee color clear;
						 ee.ehide := 1;
						}
					 else
						{set ee color black;
						 ee.ehide := 0;
						}
					};
				 foreach edge ee where not fixed && valence == 2 do 
					{ if ee.facet[1].color == clear then 
						{if ee.facet[2].color != clear then
							{set ee color green}
						};
					 if ee.facet[2].color == clear then
						{if ee.facet[1].color != clear then
							{set ee color green}
						}
					};
				 set edge where not fixed && color != green color clear;
				 set edge where not fixed && color == clear ehide 1;
				 set edge where not fixed && color != clear ehide 0;
				 set facet where not fixed && color == clear fhide 1;
				 set facet where not fixed && color != clear fhide 0;
              		}

post_converg_op_idx := 1
post_converg_op := {contact_line_display () }




