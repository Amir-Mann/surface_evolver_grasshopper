// sefit_parameter_list_2d.ses
// To initialize parameters used in the scripts 
// Programmer: Yongkang Chen, yongkang@cecs.pdx.edu
// 5/11/2014
//
ps_conv_run_unit := {}
convergence_scheme :={}
//
refine_with_r_inx := 0;     			/* toggle single letter command 'r' will be used in case r is redefined by user. 0: no, 1: yes */
mesh_initialize_idx := 1;
//
// the default value of an attribute is 0 when defined.
define vertex attribute vconadj integer  // constraint adjustment index, 0: no , 1: yes
define vertex attribute __v_on_boundary integer
define vertex attribute __v_on_cl integer
//
define edge attribute econadj integer
define edge attribute ehide integer       /* 0: show, 1: hide */
define edge attribute __e_on_cl integer
define edge attribute __e_color_index integer
define edge attribute __e_on_boundary integer
//
define facet attribute fhide integer
define facet attribute fconadj integer
define facet attribute __f_color_index integer
//
set vertex where fixed vconadj 1
set vertex where not fixed vconadj 0
set edge where fixed econadj 1
set edge where not fixed econadj 0
//
number_iteration_check := 1
total_number_iteration := 0
total_number_iteration.no_dump on
//
do_rawestv_idx := 1 // experimental. 
rawestv_count := 0
rawestv_count.no_dump on
rawestv_execess_idx := 0
rawestv_execess_idx.no_dump on
//
PSF_idx := 0					// to indicate if it is in a PSF session
PSF_idx.no_dump on
//
te_oscillation_check := 0  // <---

timeout_period_check := 1
timeout_period_check.no_dump on
timeout_period := 1200
timeout_period.no_dump on

iteration_setting := {
						script_core_result := 1;  /* Index to show if there is abnormality with the surface. 0: abnormal, stop iteration, 1: normal */
						number_iteration := 0;      
						time_iteration := 0;    
						time_count := 0;
					}
iteration_setting				
script_core_result.no_dump on
number_iteration.no_dump on
time_iteration.no_dump on
time_count.no_dump on
//
// epsilon_em := 1e-2					
// epsilon_e := 1e-4
// error_exp :=-3
// error_exp_ini := -3
// error_idx := 1
// set_error := { 
				// if error_idx == 1 then 
					// {if total_energy != 0 then
						// {error_ori := pow(10, error_exp);
						 // /* error_ori := pow(10, (error_exp + floor(log(abs(total_energy))/log(10)))) */
						// }
					// }; 
				// error := error_ori
			// } 
// set_error

error := 1e-3
error.no_dump on
error_te_var := 1e-4
error_te_var.no_dump on
error_ini := 1e-3
error_ini.no_dump on
epsilon_em := 1e-2		
epsilon_em.no_dump on		
epsilon_e := 1e-4
epsilon_e.no_dump on
//
error_rough := 1e-4
error_deep_conv_limit := error_rough*1e-3
error_rough.no_dump on
epsilon_e_rough := 1e-4
epsilon_e_rough.no_dump on
error_medium := 1e-5 	
error_medium.no_dump on		
epsilon_e_medium := 1e-5		
epsilon_e_medium.no_dump on
error_fine := 1e-6	
error_fine.no_dump on
epsilon_e_fine := 1e-6
epsilon_e_fine.no_dump on
//
if is_defined("char_length") == 0 then {char_length := 0} 
//
//in soapfilm model, the volume of the body is used to determine a proper edge_length_factor
//in string model, the body is actually the area included by the edges.
mesh_setting := {
				 free_surface_area := body[1].target;
				 edge_length_factor := 1;
				}
mesh_setting
free_surface_area.no_dump on
edge_length_factor.no_dump on
//
min_edge_length := 0
min_edge_length.no_dump on
//
// min_edge_length is created for cases where there are no_refine small edges which should be better treated as a reference edge for the mesh resolution.
// still experimental.
set_refine_mode := {if max(edge where not fixed, length)/min(edge where not fixed, length) < 20 then
						{refine_mode_idx := 1;
						}
					else
						{if count(edge where not fixed and no_refine, id) > 0 then
							{if min(edge where not fixed and no_refine, length) == min(edge where not fixed, length) then
								{min_edge_length := min(edge where not fixed and no_refine, length)
								}
							};
						 refine_mode_idx := 2;
						}
					}
//
set_refine_mode
refine_mode_idx.no_dump on
edge_trim_idx.no_dump on
//
initial_vertex_count := count(vertex where not fixed, id)
mesh_optimization_idx := 0	// value will be set to 1 for PSF in SE-FIT
base_max_edge_length := 0.5
initial_max_edge_length  := max(edge where not fixed, length)
length_threshold_max     := max(edge where not fixed, length)
length_threshold_max_old := length_threshold_max
equiang_idx := 0

find_lt := 	{length_threshold := max(edge where not fixed and not no_refine, length); 
			 autochop := max(edge where not fixed, length); 
			 printf "length_threshold := %f\n", length_threshold
			}
find_lt

mesh_res_idx := 1	/* indicate the level of mesh resolution */
mesh_res_idx.no_dump on

conservativeMeshGroomingIdx := 0; /* toggling u and V after each g command. 0, off, 1, on */
conservativeMeshGroomingIdx.no_dump on

rawestv_count := 0;
mesh_initialize_idx := 1;    // <---
// obsolete halve_long_edge_inx := 1;   			/* toggle edge refinement on the run. 0: no, 1: yes */
//halve_cl_edge_inx := 0;     			/* toggle edge refinement on the contact line. 0: no, 1: yes */
//refine_with_r_inx := 0;     			/* toggle single letter command 'r' will be used in case r is redefined by user. 0: no, 1: yes */
CVS_rough_mesh_edge_length := 0.4; 		/* initial_max_edge_length/2; */
CVS_medium_mesh_edge_length := 0.2; 	/* initial_max_edge_length/4; */
CVS_fine_mesh_edge_length := 0.1; 		/* initial_max_edge_length/8; */
CVS_very_fine_mesh_edge_length := 0.05; /* initial_max_edge_length/16;*/
//
do_mesh_smooth := 0
mesh_smooth := {local vu_ct;
				local edge_ct;
				length_ratio := max(edge where not fixed, length)/min(edge where not fixed, length);
				vu_ct := 1;
				while (length_ratio > 4 && script_core_result == 1) do 
					{edge_ct := edge_count;
					 if edge_trim_idx == 1 then
						{
						t max(edge where not fixed, length)/4;
						};
					 if edge_count < edge_ct then
						{V;
						};
					 length_ratio := max(edge where not fixed, length)/min(edge where not fixed, length);
					 vu_ct += 1;
					 if vu_ct > 25 then {break}
					}
				}
mesh_grooming := {
			      while (max(edge where not fixed, length) >= 2*length_threshold) do
					{if refine_with_r_inx == 0 then
						{
						 refine edge where not fixed and length > length_threshold;
						 V 3; 
						};
					 if refine_with_r_inx == 1 then
						{
						 r; 
						 V 3; 
						};
					}
			     }
				 
refine_special := {}      // for the refinement of edges on constraints, old name: cl_re.
//refine_special := {long_edge_count_1 := count(edge where on_constraint vertical and length > 0.5*length_threshold, id);
//					long_edge_reine_ount_1 := 0;
//                  while (long_edge_count_1 > 0 && long_edge_reine_ount_1 < 2) do
//		     		{ pp:=pp/2; qq := qq % pp; 
//					  refine edge where on_constraint vertical;
//					  long_edge_reine_ount_1 += 1;
//					  long_edge_count_1 := count(edge where on_constraint vertical and length > 0.5*length_threshold, id)
//					};
//                }

//refine_special := {long_edge_count_1 := count(edge where on_constraint vertical and length > 0.5*length_threshold, id);
//					long_edge_reine_ount_1 := 0;
//                  while (long_edge_count_1 > 0 && long_edge_reine_ount_1 < 2) do
//		     		{ pp:=pp/2; qq := qq % pp; 
//					  printf "pp = %11.6f", pp;
//					  refine edge where on_constraint vertical;
//					  long_edge_reine_ount_1 += 1;
//					  long_edge_count_1 := count(edge where on_constraint vertical and length > 0.5*length_threshold, id)
//					};
//               }

vertex_number     := count(vertex where not fixed,id)
vertex_number_setting := {vertex_number_changed_idx := 0;
						  vertex_number_old := vertex_number
						 }
vertex_number_setting		 

get_XYZ_limits := {XMax := max(vertex where not fixed, x);
				   YMax := max(vertex where not fixed, y);
				   XMin := min(vertex where not fixed, x);
				   YMin := min(vertex where not fixed, y);
				   }

get_dimension_limit := 	{
						 if max(vertex,x) != 0 then {x_max:= 5*max(vertex,x)} else {x_max :=  5};
						 if max(vertex,y) != 0 then {y_max:= 5*max(vertex,y)} else {y_max :=  5};
						 if min(vertex,x) != 0 then {x_min:= 5*min(vertex,x)} else {x_min := -5};
						 if min(vertex,y) != 0 then {y_min:= 5*min(vertex,y)} else {y_min := -5};
						 x_max_ori := x_max; x_min_ori := x_min; 
						 y_max_ori := y_max; y_min_ori := y_min;
						}
get_dimension_limit

get_XYZ_MaxMin :=  {
					X_Dim := max(vertex where not fixed, x) - min(vertex where not fixed, x);
					if X_Dim == 0 then {X_Dim := 1e-6};
					Y_Dim := max(vertex where not fixed, y) - min(vertex where not fixed, y);
					if Y_Dim == 0 then {Y_Dim := 1e-6};
				    }
get_XYZ_MaxMin

get_initial_aspect_ratio := {get_XYZ_MaxMin;
							 initial_aspect_ratio := maximum(X_Dim, Y_Dim)/minimum(X_Dim, Y_Dim)
							 }
get_initial_aspect_ratio


save_XYZ_Dim := {X_Dim_old := X_Dim;
				 Y_Dim_old := Y_Dim;
				}
				
save_XYZ_Dim
				
get_XYZDimVar := {get_XYZ_MaxMin;
				  X_DimVar := abs(X_Dim-X_Dim_old)/X_Dim_old;
			      Y_DimVar := abs(Y_Dim-Y_Dim_old)/Y_Dim_old;		
				  XYZ_DimVarMax := maximum(X_DimVar, Y_DimVar);
				 }

US_par_max_1 := 0
US_par_max_1_ori := US_par_max_1
US_par_max_2 := 0
US_par_max_2_ori := US_par_max_2
US_par_max_3 := 0
US_par_max_3_ori := US_par_max_3
US_par_min_1 := 0
US_par_min_1_ori := US_par_min_1
US_par_min_2 := 0
US_par_min_2_ori := US_par_min_2
US_par_min_3 := 0
US_par_min_3_ori := US_par_min_3


// use lt_update for a more compact script
lt_update := {length_threshold_max := length_threshold; 
			  length_threshold_max_old := length_threshold_max
			 }
//my_re      := {refine edge where not fixed and length >length_threshold}
//my_re_idx  := 1

element_on_bdry_setting := {element_on_bdry_idx :=0}
element_on_bdry_setting
element_on_bdry := {}

// data log toggle
data_log_setting :={goEnergyLogIdx := 0;
					goIterationLogIdx := 0
					}
data_log_setting				

// bubble model:1, contact line model: 2
surface_model_setting := {free_surface_model_id := 0;
						  surface_M_idx  := 1   /* indicate whether upgrade the mesh to quadratic mode. 1: M1; 2: M2 */
						  }
surface_model_setting				  

if is_defined("vol_total") == 0 then {vol_total := 0} 

// iteration_step

sefit_2D_graphing_setting := 
{
	sefit_2D_graphing_active := 0;

	sefit_2D_graphing_variable_1_title := "mean curvature 1"; 
	sefit_2D_graphing_variable_2_title := "mean curvature 2"; 
	sefit_2D_graphing_variable_3_title := "mean curvature 3"; 
	sefit_2D_graphing_variable_4_title := "mean curvature 4"; 
	sefit_2D_graphing_variable_5_title := "mean curvature 5"; 
	sefit_2D_graphing_variable_6_title := "mean curvature 6"; 
	printf "sefit_2D_graphing_variable_1_title: %s\n", sefit_2D_graphing_variable_1_title; 
	printf "sefit_2D_graphing_variable_2_title: %s\n", sefit_2D_graphing_variable_2_title; 
	printf "sefit_2D_graphing_variable_3_title: %s\n", sefit_2D_graphing_variable_3_title; 
	printf "sefit_2D_graphing_variable_4_title: %s\n", sefit_2D_graphing_variable_4_title; 
	printf "sefit_2D_graphing_variable_5_title: %s\n", sefit_2D_graphing_variable_5_title; 
	printf "sefit_2D_graphing_variable_6_title: %s\n", sefit_2D_graphing_variable_6_title; 
}
sefit_2D_graphing_setting

sefit_graphing_setting := 
{
	sefit_graphing_active := 0;
	sefit_graphing_variable_1_title := "min x";
	sefit_graphing_variable_2_title := "max x";
	sefit_graphing_variable_3_title := "min y";
	sefit_graphing_variable_4_title := "max y";
	sefit_graphing_variable_5_title := "min z";
	sefit_graphing_variable_6_title := "max z";

	printf "sefit_graphing_variable_1_title: %s\n", sefit_graphing_variable_1_title; 
	printf "sefit_graphing_variable_2_title: %s\n", sefit_graphing_variable_2_title; 
	printf "sefit_graphing_variable_3_title: %s\n", sefit_graphing_variable_3_title; 
	printf "sefit_graphing_variable_4_title: %s\n", sefit_graphing_variable_4_title; 
	printf "sefit_graphing_variable_5_title: %s\n", sefit_graphing_variable_5_title; 
	printf "sefit_graphing_variable_6_title: %s\n", sefit_graphing_variable_6_title; 
}

sefit_graphing_setting

	
sefit_2D_graphing := 
{
	/* foreach vertex vv where not fixed do {printf "bug %f,%f\n", vv.x,vv.mean_curvature}; */

	foreach vertex vv where not fixed do {printf "sefit_2D_graphing_variable_1: %f,%f\n", vv.x,vv.mean_curvature};
	printf "end sefit_2D_graphing_variable_1\n";
	foreach vertex vv where not fixed do {printf "sefit_2D_graphing_variable_2: %f,%f\n", vv.y,vv.mean_curvature};
	printf "end sefit_2D_graphing_variable_2\n";
	foreach vertex vv where not fixed do {printf "sefit_2D_graphing_variable_3: %f,%f\n", vv.id,vv.mean_curvature};
	printf "end sefit_2D_graphing_variable_3\n";
	foreach vertex vv where not fixed do {printf "sefit_2D_graphing_variable_4: %d,%f\n", vv.id,vv.mean_curvature};
	printf "end sefit_2D_graphing_variable_4\n";
	foreach vertex vv where not fixed do {printf "sefit_2D_graphing_variable_5: %d,%f\n", vv.id,vv.mean_curvature};
	printf "end sefit_2D_graphing_variable_5\n";
	foreach vertex vv where not fixed do {printf "sefit_2D_graphing_variable_6: %d,%f\n", vv.id,vv.mean_curvature};
	printf "end sefit_2D_graphing_variable_6\n"; 
}
	
	
sefit_graphing := { /*Comment out all lines that do not correspond to desired graphed output*/
	/* sefit_graphing_variable_5 := min(edge,length) - 0.5  ; */
	/*printf "sefit_graphing_variable_5: %f\n", sefit_graphing_variable_5; */

	sefit_graphing_variable_1 := min(vertex where not fixed,x);
	printf "sefit_graphing_variable_1: %f\n", sefit_graphing_variable_1;
	sefit_graphing_variable_2 := max(vertex where not fixed,x); 
	printf "sefit_graphing_variable_2: %f\n", sefit_graphing_variable_2;
	sefit_graphing_variable_3 := min(vertex where not fixed,y); 
	printf "sefit_graphing_variable_3: %f\n", sefit_graphing_variable_3;
	sefit_graphing_variable_4 := max(vertex where not fixed,y) ;
	printf "sefit_graphing_variable_4: %f\n", sefit_graphing_variable_4;
	sefit_graphing_variable_5 := min(vertex where not fixed,x) ;
	printf "sefit_graphing_variable_5: %f\n", sefit_graphing_variable_5;
	sefit_graphing_variable_6 := max(vertex where not fixed,x) ;
	printf "sefit_graphing_variable_6: %f\n", sefit_graphing_variable_6; 
	
	}; 
	

limit_break_msg := sprintf ""

symmetry_check_indices := {
							x_sym_idx := 0;
							y_sym_idx := 0;
							x_max_idx := 0;
							x_min_idx := 0;
							y_max_idx := 0;
							y_min_idx := 0;
						  }
symmetry_check_indices

get_x_min_current := {x_min_current := min(vertex where not fixed, x)}
get_x_min_old := {x_min_old := min(vertex where not fixed, x)}

x_min_adjust := {if x_min_idx == 1 then
					{x_min := x_min_ori; 
					 if min(vertex where not fixed, x) < 0 then
						{if 1.2*min(vertex where not fixed, x) > x_min_ori then
							{x_min := 1.2*min(vertex where not fixed, x)
							}
						};
					 printf "x_min_ori : %12.7f\n", x_min_ori;
					 printf "x_min : %12.7f\n", x_min;
					}
				}
				 
x_sym_check := {if script_core_result == 1 then
					{if abs(max(vertex where not fixed, x) + min(vertex where not fixed, x)) > 0.2*max(vertex where not fixed, abs(x)) then
						{printf "x symmetry broken\n"; 
						 limit_break_msg := "x symmetry broken";
						 script_core_result := 0; 
						}
					}
				}
				
y_sym_check := {if script_core_result == 1 then
					{if abs(max(vertex where not fixed, y) + min(vertex where not fixed, y)) > 0.2*max(vertex where not fixed, abs(y)) then
						{printf "y symmetry broken\n"; 
						 limit_break_msg := "y symmetry broken";
						 script_core_result := 0; 
						}
					}
				}

x_max_check := {if script_core_result == 1 then
					{if max(vertex where not fixed, x) > x_max then 
						{printf "x_max exceeded\n"; 
						 limit_break_msg := "x_max exceeded";
						 script_core_result := 0; 
						}
					}
				}

x_min_check := {if script_core_result == 1 then
					{ get_x_min_current;
					 if x_min_current < x_min then 
						{printf "x_min exceeded\n"; 
						 limit_break_msg := "x_min exceeded";
						 script_core_result := 0; 
						}
					}
				}

y_max_check := {if script_core_result == 1 then
					{if max(vertex where not fixed, y) > y_max then 
						{printf "y_max exceeded\n"; 
						 limit_break_msg := "y_max exceeded";
						 script_core_result := 0; 
						}
					}
				}

y_min_check := {if script_core_result == 1 then
					{if min(vertex where not fixed, y) < y_min then 
						{printf "y_min exceeded\n"; 
						 limit_break_msg := "y_min exceeded";
						 script_core_result := 0; 
						}
					}
				}

US_max_check_1_content := {}
US_max_check_1 := {}
US_max_check_2_content := {}
US_max_check_2 := {}
symmetry_limit_check := {}
dimension_limit_adjust := {}
special_limit_criteria := {}

// convergence_scheme
conv_run_setting := {
					scoutput_update_inx := 0;
					scoutput_update_interval := 20;
					saving_png_inx := 0;
					saving_png_interval := 20;
					}
conv_run_setting					
//
//more_operation := {} name changed to convergence_special_operation
conv_sepcial_op_setting := {
							v_hit_constr_count := 0
							}
conv_sepcial_op_setting							
convergence_special_operation := {}
//
//output_file_name := datafilename
do_name := { 
			dumpname :=  sprintf "%s.dmp",datafilename;
			vertname :=  sprintf "%s_ver.txt",datafilename; 
			logfname :=  sprintf "%s_log.txt",datafilename;
			eigfname :=  sprintf "%s_eig.txt",datafilename;
			/* eigfname_1 :=  sprintf "%s_eig_1.txt",datafilename; */
			geomfname := sprintf "%s_geo.txt",datafilename;
           } 

do_dimension  := 	{
					 delta_x := max(vertex where not fixed, x)- min(vertex where not fixed, x);
					 delta_y := max(vertex where not fixed, y)- min(vertex where not fixed, y);
					 /* lat_span := max(vertex where not fixed, y)- min(vertex where not fixed, y); */
					 /* pcl_span:= max(vertex where not fixed, y)- min(vertex where not fixed, y); */
					}

dimension_print  := {
					 do_dimension; 
					 printf "dx: %11.6f  dy: %11.6f\n", delta_x, delta_y
					}

geom_print := {}

// data_log_inx := 0
dumppath := "" //Default to nothing 
do_dump_inx := 1    		// 1, dump to one file over and over, 2, dump do files named in a sequential way
do_dump_interval := 20
dump_start_iteration_number := 0 // specify when SE (based on the number of iteration) should start dumping
do_name_inx := 0
output_file_name := datafilename
do_dump := {if do_name_inx == 1 then
				{if is_defined(dumpname) == 0 then do_name};
			if do_dump_inx == 1 then 
				{/* dump dumpname */};
			if do_dump_inx == 2 then
				{dump sprintf "%s%s_%04g.dmp", dumppath, datafilename, number_iteration;
				 /* do_offb >>> sprintf "%s%s_%04g.offb", dumppath, output_file_name, number_iteration; */
				}
				//{dump sprintf "%s %04g.dmp", datafilename, number_iteration}
		   }

if is_defined("bond") == 0 then {bond := 0} 
if is_defined("bond_ini") == 0 then {bond_ini := 0} 
if is_defined("bond_phi") == 0 then {bond_phi := 0} 
if is_defined("bond_theta") == 0 then {bond_theta := 0} 
//if is_defined("bond_cos_psi") == 0 then {bond_cos_psi := 0} 
//if is_defined("bond_sin_psi") == 0 then {bond_sin_psi := 0} 
if is_defined("bond_x") == 0 then {bond_x := 0} 
if is_defined("bond_y") == 0 then {bond_y := 0} 
//if is_defined("bond_z") == 0 then {bond_z := 0} 
if is_defined("bond_x_ini") == 0 then {bond_x_ini := 0} 
if is_defined("bond_y_ini") == 0 then {bond_y_ini := 0} 
//if is_defined("bond_z_ini") == 0 then {bond_z_ini := 0} 

if is_defined("weber_x") == 0 then {weber_x := 0} 
if is_defined("weber_y") == 0 then {weber_y := 0} 
//if is_defined("weber_z") == 0 then {weber_z := 0} 
//if is_defined("weber_yz") == 0 then {weber_yz := 0} 
//if is_defined("weber_zx") == 0 then {weber_zx := 0} 
if is_defined("weber_xy") == 0 then {weber_xy := 0} 
if is_defined("weber_x_ini") == 0 then {weber_x_ini := 0} 
if is_defined("weber_y_ini") == 0 then {weber_y_ini := 0} 
//if is_defined("weber_z_ini") == 0 then {weber_z_ini := 0} 
//if is_defined("weber_yz_ini") == 0 then {weber_yz_ini := 0} 
//if is_defined("weber_zx_ini") == 0 then {weber_zx_ini := 0} 
if is_defined("weber_xy_ini") == 0 then {weber_xy_ini := 0} 

eigenvalue_print_idx := 1
bond_eigenvalue_print_idx := 1
bond_eigenvalue_print := 	{
							 /*if PSF_idx == 1 then
								{printf "%22.15f\n", eigenvalues[1] >>> eigfname_1
								}; */
							 printf "%8.4f, %22.15f\n", BOND, eigenvalues[1];
							 printf "%8.4f, %22.15f\n", BOND, eigenvalues[1] >> eigfname;
							}

//

// eigen_value_study

vert_fix_idx   := 0 
vert_fix       := {}
vert_unfix     := {}

// convergence_operation

jig_idx := 0
//
converg_idx    := 1   // 1: mesh convergence; 2: deep convergence
constraint_change_idx := 0  // for indicating if there is any reassignment of constraint.
conj_grad_activate_count := 0;
conj_grad_idx  := 1  
resolution_idx := 1   // 1: convergence based on vertex number; 2: convergence based on edge length
small_scale_ct := 0
//get_equilibrium_idx := 0	// indicate whether to run get_equilibrium as there is no Hessian for convex surfaces
get_equilibrium := {}
//hessian_seek_idx := 1          /* indicate whether run hessian_seek, 0 no, 1 Yes */
//hessian_idx  := 1       // indicate whether run Hessian, 0 no, 1 yes, good to turn it off when in batch mode
hessian_M_idx  := 1       // indicate whether upgrade the mesh to quadratic mode. 1: M1; 2: M2
eigenvalue_study_idx := 1 //indicate whether to check eigenvalue and run saddle if there is any negative eigenvalues.
M1_eigenvalue_study := {}
//neg_eigen_ct := 0;

post_converg := {}
limit_reset_idx := 0
limit_reset := {y_max := 2*max(vertex where not fixed, y); y_min := 2*min(vertex where not fixed, y)}
extra_man_idx := 0
extra_man:={}
post_converg_op_idx := 0
post_converg_op := {}

transf_expr_s := ""
do_transform_view := {transform_expr transf_expr_s; transforms on}

// extra

bond_value_idx := 0       /* indicate whether bond value take regular increment or specified values. 1: specified values */
//bond := 0                 /* for the sake of gen_com bond_rout */

name_idx          := 2
datafile_head_idx := 1

listVertex := {}
listEdge := {}
listFacet := {}
userDefPostProcess := {}

// the stuff below is for fuel tank, and should be reorganized into convergence_special_operation to fit the new arrangement.
z_vert_adj_cri := 0    // the value of z for toggling on the vert_adj operation.
//constr_adj_idx := 1    // index to toggle checking the z_min value and setting vert_adj_ind = 0 or 1; 0: No, 1: yes,  FIT Built-in

topo_change_ind := 1 // 0: no topology change, 1: yes
topo_change    := {}

inner_cylinder_load := 0

total_e_old := 0
get_total_e_diff := { total_e_diff := abs((total_e_old - total_energy)/total_e_old)}

energy_logging := {printf "%15.3f, %d, %15.10f\n", time_count, number_iteration, total_energy >> "totalEnergyLog.csv"}

read "get_stats_string.ses"
read "histogram_update.ses"
read "get_par_update.ses"
read "get_all_update.ses"
read "psf_roughen_mesh_between_runs.ses" 
