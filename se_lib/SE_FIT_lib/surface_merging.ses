// surface_merging.ses
// modified drop_merging.ses
// for merging two surfaces (within one body) running into each other. Contact line method used.
// surfaces are on a homogenous surface, i.e. constr_id
// the ids of the two opposite vertices are directly provided 
// instead of being identified in the procedure.
// Yongkang Chen, Portland State University
// October 17, 2015
// body_id is assigned outside of the procedure.
// In the main code where this procedure is called, it might be more robust to identify and isolate subsequently
// the single vertex on each side for the purpose of merging. 
	
procedure surface_merging (integer min_v_id_12_1, integer min_v_id_12_2, integer constr_id)
{ /* identify the edge pair on which each vertex is on and which are on the wall */
	define min_v_nedge_id_12_1 integer[2];
	define min_v_nedge_id_12_2 integer[2];
	v_val := vertex[min_v_id_12_1].valence;
	nedge_id_ind := 1;
	for (inx := 1; inx < v_val + 1; inx += 1)
		{if sum(vertex[min_v_id_12_1].edge[inx], on_constraint constr_id) == 1 then  
			{min_v_nedge_id_12_1[nedge_id_ind] := vertex[min_v_id_12_1].edge[inx].id;
			 nedge_id_ind += 1
			};
		};
	v_val := vertex[min_v_id_12_2].valence;
	nedge_id_ind := 1;
	for (inx := 1; inx < v_val + 1; inx += 1)
		{if sum(vertex[min_v_id_12_2].edge[inx], on_constraint constr_id) == 1 then  
			{min_v_nedge_id_12_2[nedge_id_ind] := vertex[min_v_id_12_2].edge[inx].id;
			 nedge_id_ind += 1
			};
		};
	for (inx := 1; inx < 3; inx += 1)
		{if edge[min_v_nedge_id_12_1[inx]].vertex[1].id == min_v_id_12_1 then 
			{min_v_nvert_id_12_1_head := edge[min_v_nedge_id_12_1[inx]].vertex[2].id;
			 min_v_nedge_id_12_1_head := min_v_nedge_id_12_1[inx]
			}
		 else
			{min_v_nvert_id_12_1_tail := edge[min_v_nedge_id_12_1[inx]].vertex[1].id;
			 min_v_nedge_id_12_1_tail := min_v_nedge_id_12_1[inx]
			};
		 if edge[min_v_nedge_id_12_2[inx]].vertex[1].id == min_v_id_12_2 then 
			{min_v_nvert_id_12_2_head := edge[min_v_nedge_id_12_2[inx]].vertex[2].id;
			 min_v_nedge_id_12_2_head := min_v_nedge_id_12_2[inx]
			}
		 else
			{min_v_nvert_id_12_2_tail := edge[min_v_nedge_id_12_2[inx]].vertex[1].id;
			 min_v_nedge_id_12_2_tail := min_v_nedge_id_12_2[inx]
			}	
		};
	/* identify the vertex on the free surface that is connected to both the head and min vertex */	
	fid := edge[min_v_nedge_id_12_1_head].facet[1].id;
	if facet[fid].vertex[1].id == min_v_id_12_1 then
		{min_v_nvert_id_12_1_headover := facet[fid].vertex[2].id}
	else
		{if facet[fid].vertex[2].id == min_v_id_12_1 then
			{min_v_nvert_id_12_1_headover := facet[fid].vertex[3].id}
		 else
			{if facet[fid].vertex[3].id == min_v_id_12_1 then
				{min_v_nvert_id_12_1_headover := facet[fid].vertex[1].id}
			}
		};
	/* identify the edge that is onnected to the head vertex and is next to the edge on the free surface */
	/* headover is connected to the head vertex, minHeadOver is connected to the min vertex */
	if facet[fid].edge[1].id == min_v_nedge_id_12_1_head then
		{min_v_nedge_oid_12_1_headover := facet[fid].edge[2].oid;
		 min_v_nedge_oid_12_1_minHeadOver := facet[fid].edge[3].oid
		} 
	else
		{if facet[fid].edge[2].id == min_v_nedge_id_12_1_head then
			{min_v_nedge_oid_12_1_headover := facet[fid].edge[3].oid;
			 min_v_nedge_oid_12_1_minHeadOver := facet[fid].edge[1].oid
			}
		 else
			{min_v_nedge_oid_12_1_headover := facet[fid].edge[1].oid;
			 min_v_nedge_oid_12_1_minHeadOver := facet[fid].edge[2].oid
			}
		};
	set edge[min_v_nedge_oid_12_1_headover].color magenta;
	/* identify the vertex on the free surface that is connected to both the tail and min vertex */	
	fid := edge[min_v_nedge_id_12_1_tail].facet[1].id;
	if facet[fid].vertex[1].id == min_v_id_12_1 then
		{min_v_nvert_id_12_1_tailover := facet[fid].vertex[3].id
		}
	else
		{if facet[fid].vertex[2].id == min_v_id_12_1 then
			{min_v_nvert_id_12_1_tailover := facet[fid].vertex[1].id}
		 else
			{if facet[fid].vertex[3].id == min_v_id_12_1 then
				{min_v_nvert_id_12_1_tailover := facet[fid].vertex[2].id}
			}
		};
	/* the id of the edge that is right next to the tail vertex and edge on the free surface */
	if facet[fid].edge[1].id == min_v_nedge_id_12_1_tail then
		{min_v_nedge_oid_12_1_tailover := facet[fid].edge[3].oid;
		 min_v_nedge_oid_12_1_minTailOver := facet[fid].edge[2].oid
		} 
	else
		{if facet[fid].edge[2].id == min_v_nedge_id_12_1_tail then
			{min_v_nedge_oid_12_1_tailover := facet[fid].edge[1].oid;
			 min_v_nedge_oid_12_1_minTailOver := facet[fid].edge[3].oid
			}
		 else
			{min_v_nedge_oid_12_1_tailover := facet[fid].edge[2].oid;
			 min_v_nedge_oid_12_1_minTailOver := facet[fid].edge[1].oid
			}
		};
	set edge[min_v_nedge_oid_12_1_tailover].color cyan;
	if count(vertex[min_v_id_12_1].edge, id) > 4 then
		{foreach vertex[min_v_id_12_1].edge ee do
			{if ee.id != edge[min_v_nedge_id_12_1_head].id then
				{if ee.id != edge[min_v_nedge_id_12_1_tail].id then
					{if ee.id != edge[min_v_nedge_oid_12_1_HeadOver].id then
						{if ee.id != edge[min_v_nedge_oid_12_1_TailOver].id then
							{edgeswap ee}
						}
					}
				}
			}
		};
	/* identify the vertex on the free surface that is connected to both the head and min vertex */	
	fid := edge[min_v_nedge_id_12_2_head].facet[1].id;
	if facet[fid].vertex[1].id == min_v_id_12_2 then
		{min_v_nvert_id_12_2_headover := facet[fid].vertex[2].id}
	else
		{if facet[fid].vertex[2].id == min_v_id_12_2 then
			{min_v_nvert_id_12_2_headover := facet[fid].vertex[3].id}
		 else
			{if facet[fid].vertex[3].id == min_v_id_12_2 then
				{min_v_nvert_id_12_2_headover := facet[fid].vertex[1].id}
			}
		};
	if facet[fid].edge[1].id == min_v_nedge_id_12_2_head then
		{min_v_nedge_oid_12_2_headover := facet[fid].edge[2].oid;
		 min_v_nedge_oid_12_2_minHeadOver := facet[fid].edge[3].oid
		} /* the id of the edge that is right next to the head vertex and edge on the free surface */
	else
		{if facet[fid].edge[2].id == min_v_nedge_id_12_2_head then
			{min_v_nedge_oid_12_2_headover := facet[fid].edge[3].oid;
			 min_v_nedge_oid_12_2_minHeadOver := facet[fid].edge[1].oid
			}
		 else
			{min_v_nedge_oid_12_2_headover := facet[fid].edge[1].oid;
		     min_v_nedge_oid_12_2_minHeadOver := facet[fid].edge[2].oid
			}
		};
	set edge[min_v_nedge_oid_12_2_headover].color magenta;
	fid := edge[min_v_nedge_id_12_2_tail].facet[1].id;
	if facet[fid].vertex[1].id == min_v_id_12_2 then
		{min_v_nvert_id_12_2_tailover := facet[fid].vertex[3].id}
	else
		{if facet[fid].vertex[2].id == min_v_id_12_2 then
			{min_v_nvert_id_12_2_tailover := facet[fid].vertex[1].id}
		 else
			{if facet[fid].vertex[3].id == min_v_id_12_2 then
				{min_v_nvert_id_12_2_tailover := facet[fid].vertex[2].id}
			}
		};
	if facet[fid].edge[1].id == min_v_nedge_id_12_2_tail then
		{min_v_nedge_oid_12_2_tailover := facet[fid].edge[3].id;
		 min_v_nedge_oid_12_2_minTailOver := facet[fid].edge[2].oid
		} /* the id of the edge that is right next to the tail vertex and edge on the free surface */
	else
		{if facet[fid].edge[2].id == min_v_nedge_id_12_2_tail then
			{min_v_nedge_oid_12_2_tailover := facet[fid].edge[1].oid;
			 min_v_nedge_oid_12_2_minTailOver := facet[fid].edge[3].oid
			}
		 else
			{min_v_nedge_oid_12_2_tailover := facet[fid].edge[2].oid;
		     min_v_nedge_oid_12_2_minTailOver := facet[fid].edge[1].oid
			}
		};
	set edge[min_v_nedge_oid_12_2_tailover].color cyan;
	/* the code below assumes that there is an edge connecting headover and tailover */
	/* which may not be true */
	if count(vertex[min_v_id_12_2].edge, id) > 4 then
		{foreach vertex[min_v_id_12_2].edge ee do
			{if ee.id != edge[min_v_nedge_id_12_2_head].id then
				{if ee.id != edge[min_v_nedge_id_12_2_tail].id then
					{if ee.id != edge[min_v_nedge_oid_12_2_HeadOver].id then
						{if ee.id != edge[min_v_nedge_oid_12_2_TailOver].id then
							{edgeswap ee}
						}
					}
				}
			}
		};
	if min_v_nvert_id_12_1_headover != min_v_nvert_id_12_1_tailover then
		{foreach vertex[min_v_nvert_id_12_1_tailover].edge ee do 
			{if ee.vertex[1].id == min_v_nvert_id_12_1_headover then
				{if ee.vertex[2].id == min_v_nvert_id_12_1_tailover then
					{min_v_nedge_id_12_1_over := ee.id}
				};
			 if ee.vertex[2].id == min_v_nvert_id_12_1_headover then
				{if ee.vertex[1].id == min_v_nvert_id_12_1_tailover then
					{min_v_nedge_id_12_1_over := ee.id}
				}
			};
		 min_v_nvert_id_12_1_headover := edge[min_v_nedge_id_12_1_over].vertex[1].id;
		 min_v_nvert_id_12_1_tailover := min_v_nvert_id_12_1_headover;
		 delete edge[min_v_nedge_id_12_1_over];
		};
	foreach vertex[min_v_id_12_1].edge ee do 
		{
		if ee.id != min_v_nedge_id_12_1_head then
			{if ee.id != min_v_nedge_id_12_1_tail then
				{min_v_nedge_id_12_1_med := ee.id
				}
			}
		};
	if min_v_nvert_id_12_2_headover != min_v_nvert_id_12_2_tailover then
		{foreach vertex[min_v_nvert_id_12_2_tailover].edge ee do 
			{if ee.vertex[1].id == min_v_nvert_id_12_2_headover then
				{if ee.vertex[2].id == min_v_nvert_id_12_2_tailover then
					{min_v_nedge_id_12_2_over := ee.id}
				};
			 if ee.vertex[2].id == min_v_nvert_id_12_2_headover then
				{if ee.vertex[1].id == min_v_nvert_id_12_2_tailover then
					{min_v_nedge_id_12_2_over := ee.id}
				}
			};
		 min_v_nvert_id_12_2_headover := edge[min_v_nedge_id_12_2_over].vertex[1].id;
		 min_v_nvert_id_12_2_tailover := min_v_nvert_id_12_2_headover;
		 delete edge[min_v_nedge_id_12_2_over];
		};
	foreach vertex[min_v_id_12_2].edge ee do 
		{
		if ee.id != min_v_nedge_id_12_2_head then
			{if ee.id != min_v_nedge_id_12_2_tail then
				{min_v_nedge_id_12_2_med := ee.id
				}
			}
		};
	bridge_new_edge_1 := new_edge(min_v_nvert_id_12_2_tail, min_v_nvert_id_12_1_head);
	bridge_new_edge_2 := new_edge(min_v_nvert_id_12_1_headover, min_v_nvert_id_12_2_tail);
	bridge_new_edge_3 := new_edge(min_v_nvert_id_12_1_headover, min_v_nvert_id_12_2_headover);
	bridge_new_edge_4 := new_edge(min_v_nvert_id_12_2_head, min_v_nvert_id_12_1_headover);
	bridge_new_edge_5 := new_edge(min_v_nvert_id_12_1_tail, min_v_nvert_id_12_2_head);
	set edge[bridge_new_edge_1] constraint constr_id;
	set edge[bridge_new_edge_5] constraint constr_id;
	bridge_new_facet_1 := new_facet(-bridge_new_edge_2, min_v_nedge_oid_12_1_minHeadOver, -bridge_new_edge_1);
	printf "new facet, %d\n", bridge_new_facet_1;
	bridge_new_facet_2 := new_facet(bridge_new_edge_2, min_v_nedge_oid_12_2_minTailOver, -bridge_new_edge_3);
	printf "new facet, %d\n", bridge_new_facet_2;
	bridge_new_facet_3 := new_facet(bridge_new_edge_3, min_v_nedge_oid_12_2_minHeadOver, bridge_new_edge_4);
	printf "new facet, %d\n", bridge_new_facet_3;
	bridge_new_facet_4 := new_facet(-bridge_new_edge_4, -bridge_new_edge_5, min_v_nedge_oid_12_1_minTailOver);
	printf "new facet, %d\n", bridge_new_facet_4;
	/* body_id_1 := edge[min_v_nedge_id_12_1_head].facet[1].frontbody; 
	set facet[bridge_new_facet_1] frontbody body_id_1;
	set facet[bridge_new_facet_2] frontbody body_id_1;
	set facet[bridge_new_facet_3] frontbody body_id_1;
	set facet[bridge_new_facet_4] frontbody body_id_1; */
	set facet[bridge_new_facet_1] frontbody body_id;
	set facet[bridge_new_facet_2] frontbody body_id;
	set facet[bridge_new_facet_3] frontbody body_id;
	set facet[bridge_new_facet_4] frontbody body_id; 
	set facet[bridge_new_facet_1] frontcolor lightblue;
	set facet[bridge_new_facet_2] frontcolor lightblue;
	set facet[bridge_new_facet_3] frontcolor lightblue;
	set facet[bridge_new_facet_4] frontcolor lightblue;
	set facet[bridge_new_facet_1] MyGravitation /* gEnergy for open star */;
	set facet[bridge_new_facet_2] MyGravitation;
	set facet[bridge_new_facet_3] MyGravitation;
	set facet[bridge_new_facet_4] MyGravitation;
	dissolve edge[min_v_nedge_id_12_1_head].facet[1];
	dissolve edge[min_v_nedge_id_12_1_tail].facet[1];
	dissolve edge[min_v_nedge_id_12_2_head].facet[1];
	dissolve edge[min_v_nedge_id_12_2_tail].facet[1];
	dissolve edge where not fixed;
	dissolve vertex where not fixed;
}


