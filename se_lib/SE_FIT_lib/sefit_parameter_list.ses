// sefit_parameter_list.ses
// To initialize parameters used in the scripts 
// Programmer: Yongkang Chen, yongkang@pdx.edu
// 10/04/2010

//SE-FIT built-in variables
deep_conv_idx := 1        
jig_idx := 0
halve_cl_edge_inx := 1;       /* toggle edge refinement on the contact line. 0: no, 1: yes */
constr_adj_idx := 1           /* index to toggle checking the z_min value and setting vert_adj_ind = 0 or 1; 0: No, 1: yes */
te_oscillation_check := 1
hessian_seek_idx := 1         /* indicate whether run hessian_seek, 0 no, 1 Yes */
hessian_idx  := 0             /* indicate whether run Hessian, 0 no, 1 yes, good to turn it off when in batch mode */
get_equilibrium_idx := 1      /* indicate whether to run get_equilibrium as there is no Hessian for convex surfaces */
edge_trim_idx := 1
symmetry_idx := 1
//SE-FIT built-in variables, end
//
//procedure ps_conv_run_unit 
read "offb.ses"

ps_conv_run_unit := {}
convergence_scheme :={}
//
refine_with_r_inx := 0;                 /* toggle single letter command 'r' will be used in case r is redefined by user. 0: no, 1: yes */
mesh_initialize_idx := 1;
//
// the default value of an attribute is 0 when defined.
define vertex attribute vconadj integer  // constraint adjustment index, 0: no , 1: yes
define vertex attribute __v_on_boundary integer
define vertex attribute __v_on_cl integer
//
define edge attribute econadj integer
define edge attribute ehide integer       /* 0: show, 1: hide */
define edge attribute __e_on_cl integer   // better to add this at the top of the fe file
define edge attribute __e_color_index integer
define edge attribute __e_on_boundary integer
//
define facet attribute fhide integer
define facet attribute fconadj integer
define facet attribute __f_color_index integer
//
//number_iteration_count := 5000;
//define total_number_iteration real[50]
//total_number_iteration[1] := 0
//total_number_iteration_idx := 2
//
// number_iteration_check is not working for some reason. And the setup is not correct. 
// number_iteration is a global variable, so it accumulates over a number of runs of
// convergence_scheme. To really make this work, need to create a local variable to store
// number_iteration within convergence_scheme.
//
number_iteration_check := 1
//
total_number_iteration := 0

//
do_rawestv_idx := 1 // experimental. 
rawestv_count := 0

rawestv_execess_idx := 0

//
PSF_idx := 0                    // to indicate if it is in a PSF session

//
timeout_period_check := 1

timeout_period := 1800          //Checking number of iteration might be more objective than checking the time.

//
iteration_setting := {
                        script_core_result := 1;  /* Index to show if there is abnormality with the surface. 0: abnormal, stop iteration, 1: normal */
                        number_iteration := 0;      
                        time_iteration := 0;    
                        time_count := 0;
                    }
iteration_setting               




//
error := 1e-3

error_te_var := 1e-4

error_ini := 1e-3

epsilon_em := 1e-2      
       
epsilon_e := 1e-4

//
error_rough := 1e-4
error_deep_conv_limit := error_rough*1e-3

epsilon_e_rough := 1e-4

error_medium := 1e-5    
     
epsilon_e_medium := 1e-5        

error_fine := 1e-6  

epsilon_e_fine := 1e-6

//
//
//
US_par_max_1 := 0
US_par_max_1_ori := US_par_max_1
US_par_max_2 := 0
US_par_max_2_ori := US_par_max_2
US_par_max_3 := 0
US_par_max_3_ori := US_par_max_3
US_par_min_1 := 0
US_par_min_1_ori := US_par_min_1
US_par_min_2 := 0
US_par_min_2_ori := US_par_min_2
US_par_min_3 := 0
US_par_min_3_ori := US_par_min_3


element_on_bdry_setting := {element_on_bdry_idx :=0}
element_on_bdry_setting
element_on_bdry := {}

// data log toggle
data_log_setting :={goEnergyLogIdx := 0;
                    goIterationLogIdx := 0
                    }
data_log_setting                

// free_surface_model_id = 1, bubble model; 2, contact line model
surface_model_setting := {free_surface_model_id := 0;
                          surface_M_idx  := 1   /* indicate whether upgrade the mesh to quadratic mode. 1: M1; 2: M2 */
                          }
surface_model_setting                 

// iteration_step

sefit_2D_graphing_setting := 
{
    sefit_2D_graphing_active := 0;

    sefit_2D_graphing_variable_1_title := "mean curvature 1"; 
    sefit_2D_graphing_variable_2_title := "mean curvature 2"; 
    sefit_2D_graphing_variable_3_title := "mean curvature 3"; 
    sefit_2D_graphing_variable_4_title := "mean curvature 4"; 
    sefit_2D_graphing_variable_5_title := "mean curvature 5"; 
    sefit_2D_graphing_variable_6_title := "mean curvature 6"; 
    printf "sefit_2D_graphing_variable_1_title: %s\n", sefit_2D_graphing_variable_1_title; 
    printf "sefit_2D_graphing_variable_2_title: %s\n", sefit_2D_graphing_variable_2_title; 
    printf "sefit_2D_graphing_variable_3_title: %s\n", sefit_2D_graphing_variable_3_title; 
    printf "sefit_2D_graphing_variable_4_title: %s\n", sefit_2D_graphing_variable_4_title; 
    printf "sefit_2D_graphing_variable_5_title: %s\n", sefit_2D_graphing_variable_5_title; 
    printf "sefit_2D_graphing_variable_6_title: %s\n", sefit_2D_graphing_variable_6_title; 
}
sefit_2D_graphing_setting

sefit_graphing_setting := 
{
    sefit_graphing_active := 0;
    sefit_graphing_variable_1_title := "min x";
    sefit_graphing_variable_2_title := "max x";
    sefit_graphing_variable_3_title := "min y";
    sefit_graphing_variable_4_title := "max y";
    sefit_graphing_variable_5_title := "min z";
    sefit_graphing_variable_6_title := "max z";

    printf "sefit_graphing_variable_1_title: %s\n", sefit_graphing_variable_1_title; 
    printf "sefit_graphing_variable_2_title: %s\n", sefit_graphing_variable_2_title; 
    printf "sefit_graphing_variable_3_title: %s\n", sefit_graphing_variable_3_title; 
    printf "sefit_graphing_variable_4_title: %s\n", sefit_graphing_variable_4_title; 
    printf "sefit_graphing_variable_5_title: %s\n", sefit_graphing_variable_5_title; 
    printf "sefit_graphing_variable_6_title: %s\n", sefit_graphing_variable_6_title; 
}

sefit_graphing_setting

sefit_2D_graphing := 
{
    /* foreach vertex vv where not fixed do {printf "bug %f,%f\n", vv.x,vv.mean_curvature}; */

    foreach vertex vv where not fixed do {printf "sefit_2D_graphing_variable_1: %f,%f\n", vv.x,vv.mean_curvature};
    printf "end sefit_2D_graphing_variable_1\n";
    foreach vertex vv where not fixed do {printf "sefit_2D_graphing_variable_2: %f,%f\n", vv.y,vv.mean_curvature};
    printf "end sefit_2D_graphing_variable_2\n";
    foreach vertex vv where not fixed do {printf "sefit_2D_graphing_variable_3: %f,%f\n", vv.z,vv.mean_curvature};
    printf "end sefit_2D_graphing_variable_3\n";
    foreach vertex vv where not fixed do {printf "sefit_2D_graphing_variable_4: %d,%f\n", vv.id,vv.mean_curvature};
    printf "end sefit_2D_graphing_variable_4\n";
    foreach vertex vv where not fixed do {printf "sefit_2D_graphing_variable_5: %d,%f\n", vv.id,vv.mean_curvature};
    printf "end sefit_2D_graphing_variable_5\n";
    foreach vertex vv where not fixed do {printf "sefit_2D_graphing_variable_6: %d,%f\n", vv.id,vv.mean_curvature};
    printf "end sefit_2D_graphing_variable_6\n"; 
}
    
sefit_graphing := { /*Comment out all lines that do not correspond to desired graphed output*/
    /* sefit_graphing_variable_5 := min(edge,length) - 0.5  ; */
    /*printf "sefit_graphing_variable_5: %f\n", sefit_graphing_variable_5; */

    sefit_graphing_variable_1 := min(vertex where not fixed,x);
    printf "sefit_graphing_variable_1: %f\n", sefit_graphing_variable_1;
    sefit_graphing_variable_2 := max(vertex where not fixed,x); 
    printf "sefit_graphing_variable_2: %f\n", sefit_graphing_variable_2;
    sefit_graphing_variable_3 := min(vertex where not fixed,y); 
    printf "sefit_graphing_variable_3: %f\n", sefit_graphing_variable_3;
    sefit_graphing_variable_4 := max(vertex where not fixed,y) ;
    printf "sefit_graphing_variable_4: %f\n", sefit_graphing_variable_4;
    sefit_graphing_variable_5 := min(vertex where not fixed,z) ;
    printf "sefit_graphing_variable_5: %f\n", sefit_graphing_variable_5;
    sefit_graphing_variable_6 := max(vertex where not fixed,z) ;
    printf "sefit_graphing_variable_6: %f\n", sefit_graphing_variable_6; 
    }; 

// convergence_scheme
conv_run_setting := {
                    scoutput_update_inx := 0;
                    scoutput_update_interval := 20;
                    saving_png_inx := 0;
                    saving_png_interval := 20;
                    }
conv_run_setting                    
//
//more_operation := {} name changed to convergence_special_operation
conv_sepcial_op_setting := {
                            v_hit_constr_count := 0
                            }
conv_sepcial_op_setting                         
convergence_special_operation := {}
//

do_name := { 
            dumpname :=  sprintf "%s.dmp",datafilename;
            vertname :=  sprintf "%s_ver.txt",datafilename; 
            logfname :=  sprintf "%s_log.txt",datafilename;
            eigfname :=  sprintf "%s_eig.txt",datafilename;
            /* eigfname_1 :=  sprintf "%s_eig_1.txt",datafilename; */
            geomfname := sprintf "%s_geo.txt",datafilename;
           } 

do_dimension  :=    {
                     delta_x := max(vertex where not fixed, x)- min(vertex where not fixed, x);
                     delta_y := max(vertex where not fixed, y)- min(vertex where not fixed, y);
                     delta_z := max(vertex where not fixed, z)- min(vertex where not fixed, z);
                     /* lat_span := max(vertex where not fixed, y)- min(vertex where not fixed, y); */
                     /* pcl_span:= max(vertex where not fixed, y)- min(vertex where not fixed, y); */
                    }

dimension_print  := {
                     do_dimension; 
                     printf "dx: %11.6f  dy: %11.6f  dz: %11.6f\n", delta_x, delta_y, delta_z
                    }

geom_print := {}

// data_log_inx := 0
dumppath := "" //Default to nothing 
do_dump_inx := 1            // 1, dump to one file over and over, 2, dump do files named in a sequential way
do_dump_interval := 20
dump_start_iteration_number := 0 // specify when SE (based on the number of iteration) should start dumping
do_name_inx := 0
output_file_name := datafilename
do_dump := {if do_name_inx == 1 then
                {if is_defined(dumpname) == 0 then do_name};
            if do_dump_inx == 1 then 
                {/* dump dumpname */};
            if do_dump_inx == 2 then
                {dump sprintf "%s%s_%04g.dmp", dumppath, output_file_name, number_iteration;
                 do_offb >>> sprintf "%s%s_%04g.offb", dumppath, output_file_name, number_iteration
                }
                //{dump sprintf "%s %04g.dmp", datafilename, number_iteration}
           }

if is_defined("bond") == 0 then {bond := 0} 
if is_defined("bond_ini") == 0 then {bond_ini := 0} 
if is_defined("bond_phi") == 0 then {bond_phi := 0} 
if is_defined("bond_theta") == 0 then {bond_theta := 0} 
//if is_defined("bond_cos_psi") == 0 then {bond_cos_psi := 0} 
//if is_defined("bond_sin_psi") == 0 then {bond_sin_psi := 0} 
if is_defined("bond_x") == 0 then {bond_x := 0} 
if is_defined("bond_y") == 0 then {bond_y := 0} 
if is_defined("bond_z") == 0 then {bond_z := 0} 
if is_defined("bond_x_ini") == 0 then {bond_x_ini := 0} 
if is_defined("bond_y_ini") == 0 then {bond_y_ini := 0} 
if is_defined("bond_z_ini") == 0 then {bond_z_ini := 0} 

if is_defined("weber_x") == 0 then {weber_x := 0} 
if is_defined("weber_y") == 0 then {weber_y := 0} 
if is_defined("weber_z") == 0 then {weber_z := 0} 
if is_defined("weber_yz") == 0 then {weber_yz := 0} 
if is_defined("weber_zx") == 0 then {weber_zx := 0} 
if is_defined("weber_xy") == 0 then {weber_xy := 0} 
if is_defined("weber_x_ini") == 0 then {weber_x_ini := 0} 
if is_defined("weber_y_ini") == 0 then {weber_y_ini := 0} 
if is_defined("weber_z_ini") == 0 then {weber_z_ini := 0} 
if is_defined("weber_yz_ini") == 0 then {weber_yz_ini := 0} 
if is_defined("weber_zx_ini") == 0 then {weber_zx_ini := 0} 
if is_defined("weber_xy_ini") == 0 then {weber_xy_ini := 0} 

eigenvalue_print_idx := 1
bond_eigenvalue_print_idx := 1
bond_eigenvalue_print :=    {
                             /*if PSF_idx == 1 then
                                {printf "%22.15f\n", eigenvalues[1] >>> eigfname_1
                                }; */
                             printf "%8.4f, %22.15f\n", BOND, eigenvalues[1];
                             printf "%8.4f, %22.15f\n", BOND, eigenvalues[1] >> eigfname;
                            }

//

// eigen_value_study

vert_fix_idx   := 0 
vert_fix       := {}
vert_unfix     := {}

// convergence_operation

//
converg_idx    := 1   // 1: mesh convergence; 2: deep convergence
constraint_change_idx := 0  // for indicating if there is any reassignment of constraint.
conj_grad_activate_count := 0;
conj_grad_idx  := 1  
resolution_idx := 1   // 1: convergence based on vertex number; 2: convergence based on edge length
small_scale_ct := 0
get_equilibrium := {}
hessian_M_idx  := 1       // indicate whether upgrade the mesh to quadratic mode. 1: M1; 2: M2
eigenvalue_study_idx := 1 //indicate whether to check eigenvalue and run saddle if there is any negative eigenvalues.
M1_eigenvalue_study := {}
//neg_eigen_ct := 0;

post_converg := {}
limit_reset_idx := 0
limit_reset := {y_max := 2*max(vertex where not fixed, y); y_min := 2*min(vertex where not fixed, y)}
extra_man_idx := 0
extra_man:={}
post_converg_op_idx := 0
post_converg_op := {}

transf_expr_s := ""
do_transform_view := {transform_expr transf_expr_s; transforms on}

// extra

bond_value_idx := 0       /* indicate whether bond value take regular increment or specified values. 1: specified values */
//bond := 0                 /* for the sake of gen_com bond_rout */

name_idx          := 2
datafile_head_idx := 1

listVertex := {}
listEdge := {}
listFacet := {}
userDefPostProcess := {}

// the stuff below is for fuel tank, and should be reorganized into convergence_special_operation to fit the new arrangement.
z_vert_adj_cri := 0    // the value of z for toggling on the vert_adj operation.

topo_change_ind := 1 // 0: no topology change, 1: yes
topo_change    := {}

inner_cylinder_load := 0

total_e_old := 0
get_total_e_diff := {total_e_diff := abs((total_e_old - total_energy)/total_e_old); total_e_old := total_energy}

energy_logging := {printf "%15.3f, %d, %15.10f\n", time_count, number_iteration, total_energy >> "totalEnergyLog.csv"}

read "free_surface_initialization.ses"
read "get_stats.ses"
read "histogram_update.ses"
read "get_par_update.ses"
read "get_all_update.ses"
read "psf_roughen_mesh_between_runs.ses" 

//edge_trim_idx := 0