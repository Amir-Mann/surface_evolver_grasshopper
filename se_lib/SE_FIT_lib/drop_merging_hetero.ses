// drop_merging_hetero.ses
// for merging two drops running into each other. Contact line method used.
// drops are on a heterogenous surface, eg. at the juction between two surfaces
// Yongkang Chen, Portland State University
// October 15, 2009
//
// * run drop_dist_hetero first to determine the distance between the two drops, 
//   then run drop_merging_hetero if the distance is smaller than the criteria
//   command to run drop_dist_hetero: drop_dist(drop_id_1, drop_id_2)
// * run drop_merging_hetero directly 
//
function real drop_dist_hetero (integer drop_id_1, integer drop_id_2, integer constraint_id_1, integer constraint_id_2)
{ printf "constraint_id_1 = %d\n", constraint_id_1; 
  printf "constraint_id_2 = %d\n", constraint_id_2; 
  min_v_id_12_1 := min(vertex where __v_liquid_drop_index == drop_id_1 && on_constraint constraint_id_1 && on_constraint constraint_id_2, id);
  min_v_id_12_2 := min(vertex where __v_liquid_drop_index == drop_id_2 && on_constraint constraint_id_1 && on_constraint constraint_id_2, id);
  printf "min_v_id_12_1 = %d\n", min_v_id_12_1; 
  printf "min_v_id_12_2 = %d\n", min_v_id_12_2; 
  dist_12_min := sqrt((vertex[min_v_id_12_1].x - vertex[min_v_id_12_2].x)^2 + (vertex[min_v_id_12_1].y - vertex[min_v_id_12_2].y)^2);
  foreach vertex vv where vv.__v_liquid_drop_index == drop_id_1 do 
	{if vv.on_constraint constraint_id_1 == 1 then
		{if vv.on_constraint constraint_id_2 == 1 then
			{foreach vertex vv1 where vv1.__v_liquid_drop_index == drop_id_2 do
				{if vv1.on_constraint constraint_id_1 == 1 then
					{if vv1.on_constraint constraint_id_2 == 1 then
						{dist_12 := sqrt((vv.x-vv1.x)^2+(vv.y-vv1.y)^2);
						   dist_12_min := minimum(dist_12,dist_12_min);
						   if dist_12_min == dist_12 then 
							  {min_v_id_12_1 := vv.id;
							   min_v_id_12_2 := vv1.id
							  }
						}
					}
				}
			}
		}
	};
  /*printf "dist_12_min := %11.6f\n", dist_12_min;*/
  return dist_12_min;
}
	
procedure drop_merging_hetero (integer drop_id_1, integer drop_id_2, integer constraint_id_1, integer constraint_id_2)
{ min_v_id_12_1 := min(vertex where __v_liquid_drop_index == drop_id_1 && on_constraint constraint_id_1 && on_constraint constraint_id_2, id);
  min_v_id_12_2 := min(vertex where __v_liquid_drop_index == drop_id_2 && on_constraint constraint_id_1 && on_constraint constraint_id_2, id);
  dist_12_min := sqrt((vertex[min_v_id_12_1].x - vertex[min_v_id_12_2].x)^2 + (vertex[min_v_id_12_1].y - vertex[min_v_id_12_2].y)^2);
  foreach vertex vv where vv.__v_liquid_drop_index == drop_id_1 do 
	{if vv.on_constraint constraint_id_1 == 1 then
		{if vv.on_constraint constraint_id_2 == 1 then
			{foreach vertex vv1 where vv1.__v_liquid_drop_index == drop_id_2 do
				{if vv1.on_constraint constraint_id_1 == 1 then
					{if vv1.on_constraint constraint_id_2 == 1 then
						{dist_12 := sqrt((vv.x-vv1.x)^2+(vv.y-vv1.y)^2);
						   dist_12_min := minimum(dist_12,dist_12_min);
						   if dist_12_min == dist_12 then 
							  {min_v_id_12_1 := vv.id;
							   min_v_id_12_2 := vv1.id
							  }
						}
					}
				}
			}
		}
	};
  define min_v_nedge_id_12_1 integer[2];
  define min_v_nedge_id_12_2 integer[2];
  v_val := vertex[min_v_id_12_1].valence;
  for (inx := 1; inx < v_val + 1; inx += 1)
	{if sum(vertex[min_v_id_12_1].edge[inx], on_constraint constraint_id_1) == 1 then
		{if sum(vertex[min_v_id_12_1].edge[inx], on_constraint constraint_id_2) == 0 then
			{min_v_nedge_id_12_1[1] := vertex[min_v_id_12_1].edge[inx].id;
			};
		}
	};
  for (inx := 1; inx < v_val + 1; inx += 1)
	{if sum(vertex[min_v_id_12_1].edge[inx], on_constraint constraint_id_2) == 1 then
		{if sum(vertex[min_v_id_12_1].edge[inx], on_constraint constraint_id_1) == 0 then
			{min_v_nedge_id_12_1[2] := vertex[min_v_id_12_1].edge[inx].id;
			};
		}
	};
  v_val := vertex[min_v_id_12_2].valence;
  for (inx := 1; inx < v_val + 1; inx += 1)
	{if sum(vertex[min_v_id_12_2].edge[inx], on_constraint constraint_id_1) == 1 then  
		{if sum(vertex[min_v_id_12_2].edge[inx], on_constraint constraint_id_2) == 0 then 
			{min_v_nedge_id_12_2[1] := vertex[min_v_id_12_2].edge[inx].id;
			};
		}
	};
  for (inx := 1; inx < v_val + 1; inx += 1)
	{if sum(vertex[min_v_id_12_2].edge[inx], on_constraint constraint_id_2) == 1 then  
		{if sum(vertex[min_v_id_12_2].edge[inx], on_constraint constraint_id_1) == 0 then 
			{min_v_nedge_id_12_2[2] := vertex[min_v_id_12_2].edge[inx].id;
			};
		}
	};
  for (inx := 1; inx < 3; inx += 1)
	{if edge[min_v_nedge_id_12_1[inx]].vertex[1].id == min_v_id_12_1 then 
		{min_v_nvert_id_12_1_head := edge[min_v_nedge_id_12_1[inx]].vertex[2].id;
		 min_v_nedge_id_12_1_head := min_v_nedge_id_12_1[inx]
		}
	 else
		{min_v_nvert_id_12_1_tail := edge[min_v_nedge_id_12_1[inx]].vertex[1].id;
		 min_v_nedge_id_12_1_tail := min_v_nedge_id_12_1[inx]
		};
	 if edge[min_v_nedge_id_12_2[inx]].vertex[1].id == min_v_id_12_2 then 
		{min_v_nvert_id_12_2_head := edge[min_v_nedge_id_12_2[inx]].vertex[2].id;
		 min_v_nedge_id_12_2_head := min_v_nedge_id_12_2[inx]
		}
	 else
		{min_v_nvert_id_12_2_tail := edge[min_v_nedge_id_12_2[inx]].vertex[1].id;
		 min_v_nedge_id_12_2_tail := min_v_nedge_id_12_2[inx]
		}	
	};
	
	fid_1 := edge[min_v_nedge_id_12_1_head].facet[1].id;
	foreach edge[min_v_nedge_id_12_1_tail].facet ff do 
		{
		 if ff.on_constraint constraint_id_2 == 0 then
			{fid_2 := ff.id
			}
		};
	if fid_1 == fid_2 then
		{foreach facet[fid_1].edge ee do
			{if ee.on_constraint constraint_id_1 ==0 then
				{if ee.on_constraint constraint_id_2 ==0 then
					{refine ee
					}
				}
			}
		};
	
	/* identify the vertex on the free surface that is connected to both the head and min vertex */	
	fid := edge[min_v_nedge_id_12_1_head].facet[1].id;
	if facet[fid].vertex[1].id == min_v_id_12_1 then
		{min_v_nvert_id_12_1_headover := facet[fid].vertex[3].id}
	else
		{if facet[fid].vertex[2].id == min_v_id_12_1 then
			{min_v_nvert_id_12_1_headover := facet[fid].vertex[1].id}
		 else
			{if facet[fid].vertex[3].id == min_v_id_12_1 then
				{min_v_nvert_id_12_1_headover := facet[fid].vertex[2].id}
			}
		};
	/* identify the edge that is right next to the head vertex and edge on the free surface */
	if facet[fid].edge[1].id == min_v_nedge_id_12_1_head then
		{min_v_nedge_id_12_1_headover := facet[fid].edge[2].oid
		} 
	else
		{if facet[fid].edge[2].id == min_v_nedge_id_12_1_head then
			{min_v_nedge_id_12_1_headover := facet[fid].edge[3].oid
			}
		 else
			{min_v_nedge_id_12_1_headover := facet[fid].edge[1].oid
			}
		};
	/* identify the vertex on the free surface that is connected to both the tail and min vertex */	
	foreach edge[min_v_nedge_id_12_1_tail].facet ff do 
	{
	 if ff.on_constraint constraint_id_2 == 0 then
		{fid := ff.id
		}
	};
	if facet[fid].vertex[1].id == min_v_id_12_1 then
		{min_v_nvert_id_12_1_tailover := facet[fid].vertex[2].id}
	else
		{if facet[fid].vertex[2].id == min_v_id_12_1 then
			{min_v_nvert_id_12_1_tailover := facet[fid].vertex[3].id}
		 else
			{if facet[fid].vertex[3].id == min_v_id_12_1 then
				{min_v_nvert_id_12_1_tailover := facet[fid].vertex[1].id}
			}
		};
	/* the id of the edge that is right next to the tail vertex and edge on the free surface */
	if facet[fid].edge[1].id == min_v_nedge_id_12_1_tail then
		{min_v_nedge_id_12_1_tailover := facet[fid].edge[3].oid
		} 
	else
		{if facet[fid].edge[2].id == min_v_nedge_id_12_1_tail then
			{min_v_nedge_id_12_1_tailover := facet[fid].edge[1].oid
			}
		 else
			{min_v_nedge_id_12_1_tailover := facet[fid].edge[2].oid
			}
		};
		
	foreach edge[min_v_nedge_id_12_2_head].facet ff do 
		{
		 if ff.on_constraint constraint_id_2 == 0 then
			{fid_1 := ff.id
			}
		};
	fid_2 := edge[min_v_nedge_id_12_2_tail].facet[1].id;
	if fid_1 == fid_2 then
		{foreach facet[fid_1].edge ee do
			{if ee.on_constraint constraint_id_1 ==0 then
				{if ee.on_constraint constraint_id_2 ==0 then
					{refine ee
					}
				}
			}
		};

	foreach edge[min_v_nedge_id_12_2_head].facet ff do 
	{
	 if ff.on_constraint constraint_id_2 == 0 then
		{fid := ff.id
		}
	};
	if facet[fid].vertex[1].id == min_v_id_12_2 then
		{min_v_nvert_id_12_2_headover := facet[fid].vertex[3].id}
	else
		{if facet[fid].vertex[2].id == min_v_id_12_2 then
			{min_v_nvert_id_12_2_headover := facet[fid].vertex[1].id}
		 else
			{if facet[fid].vertex[3].id == min_v_id_12_2 then
				{min_v_nvert_id_12_2_headover := facet[fid].vertex[2].id}
			}
		};
	if facet[fid].edge[1].id == min_v_nedge_id_12_2_head then
		{min_v_nedge_id_12_2_headover := facet[fid].edge[2].oid
		} /* the id of the edge that is right next to the head vertex and edge on the free surface */
	else
		{if facet[fid].edge[2].id == min_v_nedge_id_12_2_head then
			{min_v_nedge_id_12_2_headover := facet[fid].edge[3].oid
			}
		 else
			{min_v_nedge_id_12_2_headover := facet[fid].edge[1].oid
			}
		};
	fid := edge[min_v_nedge_id_12_2_tail].facet[1].id;
	if facet[fid].vertex[1].id == min_v_id_12_2 then
		{min_v_nvert_id_12_2_tailover := facet[fid].vertex[2].id}
	else
		{if facet[fid].vertex[2].id == min_v_id_12_2 then
			{min_v_nvert_id_12_2_tailover := facet[fid].vertex[3].id}
		 else
			{if facet[fid].vertex[3].id == min_v_id_12_2 then
				{min_v_nvert_id_12_2_tailover := facet[fid].vertex[1].id}
			}
		};
	if facet[fid].edge[1].id == min_v_nedge_id_12_2_tail then
		{min_v_nedge_id_12_2_tailover := facet[fid].edge[3].id
		} /* the id of the edge that is right next to the tail vertex and edge on the free surface */
	else
		{if facet[fid].edge[2].id == min_v_nedge_id_12_2_tail then
			{min_v_nedge_id_12_2_tailover := facet[fid].edge[1].oid
			}
		 else
			{min_v_nedge_id_12_2_tailover := facet[fid].edge[2].oid
			}
		};
	if min_v_nvert_id_12_1_headover != min_v_nvert_id_12_1_tailover then
		{foreach vertex[min_v_nvert_id_12_1_tailover].edge ee do 
			{if ee.vertex[1].id == min_v_nvert_id_12_1_headover then
				{if ee.vertex[2].id == min_v_nvert_id_12_1_tailover then
					{min_v_nedge_id_12_1_over := ee.id}
				};
			 if ee.vertex[2].id == min_v_nvert_id_12_1_headover then
				{if ee.vertex[1].id == min_v_nvert_id_12_1_tailover then
					{min_v_nedge_id_12_1_over := ee.id}
				}
			};
		 min_v_nvert_id_12_1_headover := edge[min_v_nedge_id_12_1_over].vertex[1].id;
		 min_v_nvert_id_12_1_tailover := min_v_nvert_id_12_1_headover;
		 delete edge[min_v_nedge_id_12_1_over];
		};
	foreach vertex[min_v_id_12_1].edge ee do 
		{
		if ee.id != min_v_nedge_id_12_1_head then
			{if ee.id != min_v_nedge_id_12_1_tail then
				{min_v_nedge_id_12_1_med := ee.id
				}
			}
		};
	if min_v_nvert_id_12_2_headover != min_v_nvert_id_12_2_tailover then
		{foreach vertex[min_v_nvert_id_12_2_tailover].edge ee do 
			{if ee.vertex[1].id == min_v_nvert_id_12_2_headover then
				{if ee.vertex[2].id == min_v_nvert_id_12_2_tailover then
					{min_v_nedge_id_12_2_over := ee.id}
				};
			 if ee.vertex[2].id == min_v_nvert_id_12_2_headover then
				{if ee.vertex[1].id == min_v_nvert_id_12_2_tailover then
					{min_v_nedge_id_12_2_over := ee.id}
				}
			};
		 min_v_nvert_id_12_2_headover := edge[min_v_nedge_id_12_2_over].vertex[1].id;
		 min_v_nvert_id_12_2_tailover := min_v_nvert_id_12_2_headover;
		 delete edge[min_v_nedge_id_12_2_over];
		};
	foreach vertex[min_v_id_12_2].edge ee do 
		{
		if ee.id != min_v_nedge_id_12_2_head then
			{if ee.id != min_v_nedge_id_12_2_tail then
				{min_v_nedge_id_12_2_med := ee.id
				}
			}
		};
	bridge_new_edge_1 := new_edge(min_v_nvert_id_12_2_tail, min_v_nvert_id_12_1_head);
	bridge_new_edge_2 := new_edge(min_v_nvert_id_12_1_headover, min_v_nvert_id_12_2_tail);
	bridge_new_edge_3 := new_edge(min_v_nvert_id_12_1_headover, min_v_nvert_id_12_2_headover);
	bridge_new_edge_4 := new_edge(min_v_nvert_id_12_2_head, min_v_nvert_id_12_1_headover);
	bridge_new_edge_5 := new_edge(min_v_nvert_id_12_1_tail, min_v_nvert_id_12_2_head);
	set edge[bridge_new_edge_1] constraint constraint_id_1;
	set edge[bridge_new_edge_5] constraint constraint_id_2;
	bridge_new_facet_1 := new_facet( bridge_new_edge_1,  min_v_nedge_id_12_1_headover, bridge_new_edge_2);
	bridge_new_facet_2 := new_facet(-bridge_new_edge_2,  bridge_new_edge_3, min_v_nedge_id_12_2_tailover);
	bridge_new_facet_3 := new_facet(-bridge_new_edge_3, -bridge_new_edge_4, min_v_nedge_id_12_2_headover);
	bridge_new_facet_4 := new_facet( bridge_new_edge_4,  min_v_nedge_id_12_1_tailover, bridge_new_edge_5);
	body_id_1 := edge[min_v_nedge_id_12_1_head].facet[1].frontbody;
	set facet[bridge_new_facet_1] frontbody body_id_1;
	set facet[bridge_new_facet_2] frontbody body_id_1;
	set facet[bridge_new_facet_3] frontbody body_id_1;
	set facet[bridge_new_facet_4] frontbody body_id_1;
	set facet[bridge_new_facet_1] color lightblue;
	set facet[bridge_new_facet_2] color lightblue;
	set facet[bridge_new_facet_3] color lightblue;
	set facet[bridge_new_facet_4] color lightblue;
	body_id_2 := edge[min_v_nedge_id_12_2_head].facet[1].frontbody;
	body[body_id_1].target := body[body_id_1].target + body[body_id_2].target;
	foreach vertex vv where __v_liquid_drop_index == body_id_2 do
		{vv.__v_liquid_drop_index := body_id_1};
	foreach edge ee where __e_liquid_drop_index == body_id_2 do
		{ee.__e_liquid_drop_index := body_id_1};
	foreach facet ff where ff.frontbody == body_id_2 do
		{set ff frontbody body_id_1};
		
	vertex_merge(min_v_id_12_1,min_v_id_12_2);
    bridge_new_facet_5 := new_facet(-bridge_new_edge_5,	min_v_nedge_id_12_1_tail, min_v_nedge_id_12_2_head);
	set facet[bridge_new_facet_5] frontbody body_id_1;
	set facet[bridge_new_facet_5] constraint constraint_id_2;
	set facet[bridge_new_facet_5] color -1;

	dissolve edge[min_v_nedge_id_12_1_head].facet[1];
	foreach edge[min_v_nedge_id_12_1_tail].facet ff do
		{if ff.on_constraint constraint_id_2 == 0 then dissolve ff};
	foreach edge[min_v_nedge_id_12_2_head].facet ff do
		{if ff.on_constraint constraint_id_2 == 0 then dissolve ff};
	dissolve edge[min_v_nedge_id_12_2_tail].facet[1];
	dissolve edges;
	dissolve vertices;
	dissolve body[body_id_2]
}


